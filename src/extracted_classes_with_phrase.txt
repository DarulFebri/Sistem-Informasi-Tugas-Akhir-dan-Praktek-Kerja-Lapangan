// --- Konten dari Direktori: app/Http/Controllers ---
// FILE: app/Http/Controllers/AdminController.php
AdminController{
    public function loginForm()
        {
            return view('admin.login');
        }
    
        public function login(Request $request)
        {
            $request->validate([
                'email' => 'required|email',
                'password' => 'required',
            ]);
    
            $credentials = $request->only('email', 'password');
            $credentials['role'] = 'admin'; // Tambahkan role ke credentials
    
            if (Auth::attempt($credentials)) {
                $request->session()->regenerate();
    
                return redirect()->intended(route('admin.dashboard'));
            }
    
            return back()->withErrors([
                'email' => 'Email atau password salah.',
            ]);
        }
    
        public function dashboard()
        {
            return view('admin.dashboard');
        }
    
        public function logout(Request $request)
        {
            Auth::logout();
    
            $request->session()->invalidate();
    
            $request->session()->regenerateToken();
    
            return redirect('/'); // Redirect ke halaman utama atau halaman lain setelah logout
        }
    
        // Dibawah ini untuk CRUD mahasiswa
        public function daftarMahasiswa(Request $request){
            $mahasiswas = Mahasiswa::query(); // Start with a query builder
    
            // Sorting
            if ($request->has('sort_by') && $request->has('sort_order')) {
                $sortBy = $request->input('sort_by');
                $sortOrder = $request->input('sort_order');
    
                if (in_array($sortBy, ['kelas', 'jenis_kelamin'])) {
                    $mahasiswas->orderBy($sortBy, $sortOrder);
                }
            }
    
            $mahasiswas = $mahasiswas->get(); // Get the results
    
            return view('admin.mahasiswa.index', compact('mahasiswas'));
        }
    
        public function detailMahasiswa(Mahasiswa $mahasiswa)
        {
            return view('admin.mahasiswa.show', compact('mahasiswa'));
        }
    
        public function createMahasiswa()
        {
            return view('admin.mahasiswa.create');
        }
    
        /*public function storeMahasiswa(Request $request)
        {
            $request->validate([
                'nim' => 'required|unique:mahasiswas',
                'nama_lengkap' => 'required',
                'jurusan' => 'required',
                'prodi' => 'required',
                'jenis_kelamin' => 'required',
                'kelas' => 'required',
            ]);
    
            Mahasiswa::create($request->all());
    
            logActivity('Membuat mahasiswa baru: ' . $request->nama_lengkap, 'Mahasiswa');
    
            return redirect()->route('admin.mahasiswa.index')->with('success', 'Mahasiswa berhasil ditambahkan.');
        }>*/
    
        public function storeMahasiswa(Request $request)
        {
            // Pastikan Anda memiliki Validator facade di-import: use Illuminate\Support\Facades\Validator;
            $validator = Validator::make($request->all(), [
                'nim' => 'required|unique:mahasiswas',
                'nama_lengkap' => 'required',
                'jurusan' => 'required',
                'prodi' => 'required',
                'jenis_kelamin' => 'required',
                'kelas' => 'required',
                'email' => 'required|email|unique:users', // Validasi email untuk user
                'password' => 'required|min:8', // Validasi password untuk user
            ]);
    
            if ($validator->fails()) {
                return back()->withErrors($validator)->withInput();
            }
    
            // Buat user baru terlebih dahulu
            $user = User::create([
                'name' => $request->nama_lengkap, // Gunakan nama lengkap mahasiswa sebagai nama user
                'email' => $request->email,
                'password' => Hash::make($request->password),
                'role' => 'mahasiswa', // Tetapkan role 'mahasiswa'
            ]);
    
            // Buat data mahasiswa dan kaitkan dengan user_id yang baru dibuat
            Mahasiswa::create([
                'user_id' => $user->id, // Penting: kaitkan dengan ID user yang baru dibuat
                'nim' => $request->nim,
                'nama_lengkap' => $request->nama_lengkap,
                'jurusan' => $request->jurusan,
                'prodi' => $request->prodi,
                'jenis_kelamin' => $request->jenis_kelamin,
                'kelas' => $request->kelas,
            ]);
    
            logActivity('Membuat mahasiswa baru: ' . $request->nama_lengkap, 'Mahasiswa');
    
            return redirect()->route('admin.mahasiswa.index')->with('success', 'Mahasiswa berhasil ditambahkan!');
        }
    
        public function editMahasiswa(Mahasiswa $mahasiswa)
        {
            return view('admin.mahasiswa.edit', compact('mahasiswa'));
        }
    
        public function updateMahasiswa(Request $request, Mahasiswa $mahasiswa)
        {
            $request->validate([
                'nim' => 'required|unique:mahasiswas,nim,' . $mahasiswa->id,
                'nama_lengkap' => 'required',
                'jurusan' => 'required',
                'prodi' => 'required',
                'jenis_kelamin' => 'required',
                'kelas' => 'required',
            ]);
    
            $mahasiswa->update($request->all());
    
            logActivity('Mengupdate mahasiswa: ' . $mahasiswa->nama_lengkap, 'Mahasiswa');
    
            return redirect()->route('admin.mahasiswa.index')->with('success', 'Mahasiswa berhasil diupdate.');
        }
    
        public function destroyMahasiswa(Mahasiswa $mahasiswa)
        {
            $mahasiswa->delete();
    
            logActivity('Menghapus mahasiswa: ' . $mahasiswa->nama_lengkap, 'Mahasiswa');
    
            return redirect()->route('admin.mahasiswa.index')->with('success', 'Mahasiswa berhasil dihapus.');
        }
    
        // Dibawah ini untuk dosen Methods
        public function daftarDosen()
        {
            $dosens = Dosen::all();
            return view('admin.dosen.index', compact('dosens'));
        }
    
        public function detailDosen(Dosen $dosen)
        {
            return view('admin.dosen.show', compact('dosen'));
        }
    
        public function createDosen()
        {
            return view('admin.dosen.create');
        }
    
        public function storeDosen(Request $request)
        {
            $validator = Validator::make($request->all(), [
                'nidn' => 'required|unique:dosens',
                'nama' => 'required',
                'jurusan' => 'required',
                'prodi' => 'required',
                'email' => 'required|email|unique:users',
                'password' => 'required|min:8',
            ]);
    
            if ($validator->fails()) {
                return back()->withErrors($validator)->withInput();
            }
    
            $user = User::create([
                'name' => $request->nama,
                'email' => $request->email,
                'password' => Hash::make($request->password),
                'role' => 'dosen',
            ]);
    
            Dosen::create([
                'user_id' => $user->id,
                'nidn' => $request->nidn,
                'nama' => $request->nama,
                'jurusan' => $request->jurusan,
                'prodi' => $request->prodi,
                'jenis_kelamin' => $request->jenis_kelamin,
                'password' => $request->password,
    
            ]);
    
            // logActivity('Membuat dosen baru: ' . $request->nama, 'Dosen'); // Jika Anda menggunakan logActivity
            return redirect()->route('admin.dosen.index')->with('success', 'Dosen berhasil ditambahkan!');
        }
    
        public function editDosen(Dosen $dosen)
        {
            return view('admin.dosen.edit', compact('dosen'));
        }
    
        public function updateDosen(Request $request, Dosen $dosen)
        {
            $request->validate([
                'nidn' => 'required|unique:dosens,nidn,' . $dosen->id,
                'nama_lengkap' => 'required',
                'jenis_kelamin' => 'required',
            ]);
    
            $dosen->update($request->all());
    
            return redirect()->route('admin.dosen.index')->with('success', 'Dosen berhasil diupdate.');
        }
    
        public function destroyDosen(Dosen $dosen)
        {
            $dosen->delete();
    
            return redirect()->route('admin.dosen.index')->with('success', 'Dosen berhasil dihapus.');
        }
    
        public function importDosenForm()
        {
            return view('admin.dosen.import');
        }
    
        public function importDosen(Request $request)
        {
            $request->validate([
                'file' => 'required|mimes:xlsx,xls',
            ]);
    
            Excel::import(new DosenImport, $request->file('file'));
    
            return redirect()->route('admin.dosen.index')->with('success', 'Data dosen berhasil diimport.');
        }
    
        // Dibawah ini Pengajuan Sidang Methods
        public function daftarPengajuan()
        {
            //$pengajuans = Pengajuan::with('mahasiswa')->get(); // Eager load data mahasiswa
            $pengajuans = Pengajuan::with('mahasiswa') // Eager load relasi mahasiswa jika digunakan di view
                ->orderBy('created_at', 'desc') // Urutkan berdasarkan tanggal terbaru
                ->paginate(10); // Ambil 10 pengajuan per halaman. Sesuaikan jumlah ini.
    
            return view('admin.pengajuan.index', compact('pengajuans'));
        }
    
        public function detailPengajuan(Pengajuan $pengajuan)
        {
            $dokumens = Dokumen::where('pengajuan_id', $pengajuan->id)->get(); // Ambil dokumen terkait pengajuan
            return view('admin.pengajuan.show', compact('pengajuan', 'dokumens'));
        }
    
        public function setujuiPengajuan(Pengajuan $pengajuan)
        {
            $pengajuan->update(['status' => 'disetujui']);
            return redirect()->route('admin.pengajuan.index')->with('success', 'Pengajuan berhasil disetujui.');
        }
    
        public function tolakPengajuan(Pengajuan $pengajuan)
        {
            $pengajuan->update(['status' => 'ditolak']);
            return redirect()->route('admin.pengajuan.index')->with('success', 'Pengajuan berhasil ditolak.');
        }
    
        // Dibawah ini Persidangan Methods
        public function daftarSidang()
        {
            $sidangs = Sidang::with('pengajuan.mahasiswa')->get(); // Eager load data
            return view('admin.sidang.index', compact('sidangs'));
        }
    
        public function kalenderSidang()
        {
            $sidangs = Sidang::with('pengajuan.mahasiswa')->get();
            $events = [];
    
            foreach ($sidangs as $sidang) {
                if ($sidang->tanggal_sidang) {
                    $events[] = [
                        'title' => 'Sidang ' . $sidang->pengajuan->mahasiswa->nama_lengkap,
                        'start' => $sidang->tanggal_sidang,
                        // Tambahkan data lain yang ingin ditampilkan di kalender
                    ];
                }
            }
    
            return view('admin.sidang.kalender', compact('events'));
        }
    
        public function detailSidang(Sidang $sidang)
        {
            return view('admin.sidang.show', compact('sidang'));
        }
    
        // Method untuk menampilkan nilai dan hasil (jika diperlukan terpisah)
        // public function nilaiSidang(Sidang $sidang) { ... }
        // public function hasilSidang(Sidang $sidang) { ... }
    
        // Dibawah ini import mahasiswa method
        public function importMahasiswaForm()
        {
            return view('admin.mahasiswa.import');
        }
    
        public function importMahasiswa(Request $request)
        {
            $request->validate([
                'file' => 'required|mimes:xlsx,xls',
            ]);
    
            Excel::import(new MahasiswaImport, $request->file('file'));
    
            return redirect()->route('admin.mahasiswa.index')->with('success', 'Data mahasiswa berhasil diimport.');
        }
    
        // Dibawah ini export (mahasiswa, Dosen, Sidang) method
        public function exportMahasiswa()
        {
            return Excel::download(new MahasiswasExport, 'data_mahasiswa.xlsx');
        }
    
        public function exportDosen()
        {
            return Excel::download(new DosensExport, 'data_dosen.xlsx');
        }
    
        public function exportSidang()
        {
            return Excel::download(new SidangsExport, 'data_persidangan.xlsx');
        }
    
        // Dibawah ini Untuk Log aktivitas
        public function showActivities()
        {
            $activities = Activity::with('user')->latest()->paginate(10); // Ambil log, urutkan terbaru, paginasi
            return view('admin.activities.index', compact('activities'));
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Http/Controllers/AuthController.php
AuthController{
    public function showRegistrationFormMahasiswa()
        {
            return view('auth.register-mahasiswa');
        }
    
        public function registerMahasiswa(Request $request)
        {
            $validator = Validator::make($request->all(), [
                'nim' => 'required|unique:mahasiswas',
                'nama_lengkap' => 'required',
                'jurusan' => 'required',
                'prodi' => 'required',
                'jenis_kelamin' => 'required',
                'kelas' => 'required',
                'email' => 'required|email|unique:users',
                'password' => 'required|min:8|confirmed',
            ]);
    
            if ($validator->fails()) {
                return back()->withErrors($validator)->withInput();
            }
    
            $user = User::create([
                'email' => $request->email,
                'password' => Hash::make($request->password),
                'role' => 'mahasiswa',
            ]);
    
            Mahasiswa::create([
                'user_id' => $user->id,
                'nim' => $request->nim,
                'nama_lengkap' => $request->nama_lengkap,
                'jurusan' => $request->jurusan,
                'prodi' => $request->prodi,
                'jenis_kelamin' => $request->jenis_kelamin,
                'kelas' => $request->kelas,
            ]);
    
            Auth::login($user);
    
            return redirect('/mahasiswa/dashboard');
        }
    
        public function login(Request $request)
        {
            $credentials = $request->validate([
                'email' => ['required', 'email'],
                'password' => 'required',
            ]);
    
            if (Auth::attempt($credentials)) {
                $request->session()->regenerate();
    
                $user = Auth::user();
    
                if ($user->role == 'admin') {
                    return redirect()->intended('/admin/dashboard');
                } elseif ($user->role == 'dosen') {
                    return redirect()->intended('/dosen/dashboard');
                } elseif ($user->role == 'mahasiswa') {
                    return redirect()->intended('/mahasiswa/dashboard');
                }
    
                return redirect()->intended('/dashboard'); // Default redirect
            }
    
            return back()->withErrors([
                'email' => 'Email atau password salah.',
            ])->onlyInput('email');
        }
    
        public function showLoginForm()
        {
            return view('auth.login'); // Pastikan view ini ada
        }
    
        public function logout(Request $request)
        {
            Auth::logout();
    
            $request->session()->invalidate();
    
            $request->session()->regenerateToken();
    
            return redirect('/');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Http/Controllers/Controller.php
Controller{
    //
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Http/Controllers/DokumenController.php
DokumenController{
    // Helper untuk mendapatkan objek Mahasiswa dari user yang login
        private function getLoggedInMahasiswa()
        {
            return Mahasiswa::where('user_id', Auth::id())->firstOrFail();
        }
    
        public function index(Pengajuan $pengajuan)
        {
            if (!Auth::check() || Auth::user()->role !== 'mahasiswa') {
                return redirect()->route('mahasiswa.login')->with('error', 'Silakan login terlebih dahulu.');
            }
    
            $mahasiswa = $this->getLoggedInMahasiswa();
    
            // Pastikan mahasiswa yang melihat adalah pemilik pengajuan
            if ($mahasiswa->id != $pengajuan->mahasiswa_id) {
                abort(403, 'Anda tidak diizinkan mengakses dokumen ini.');
            }
    
            $dokumenTerupload = Dokumen::where('pengajuan_id', $pengajuan->id)->get();
    
            return view('mahasiswa.dokumen.index', compact('pengajuan', 'dokumenTerupload'));
        }
    
        // Metode store dan update di DokumenController dapat dihapus atau disesuaikan
        // jika Anda ingin memungkinkan update/hapus dokumen individual secara terpisah dari pengajuan.
        // Namun, untuk alur pengajuan dokumen persyaratan, PengajuanController sudah cukup.
    
        // Contoh: Jika Anda ingin mahasiswa bisa menghapus dokumen satu per satu
        public function destroy(Dokumen $dokumen)
        {
            if (!Auth::check() || Auth::user()->role !== 'mahasiswa') {
                return redirect()->route('mahasiswa.login')->with('error', 'Silakan login terlebih dahulu.');
            }
    
            $mahasiswa = $this->getLoggedInMahasiswa();
    
            // Pastikan dokumen milik mahasiswa yang login dan pengajuan masih dalam status draft/ditolak
            if ($dokumen->pengajuan->mahasiswa_id !== $mahasiswa->id ||
                !in_array($dokumen->pengajuan->status, ['draft', 'ditolak_admin', 'ditolak_kaprodi'])) {
                abort(403, 'Anda tidak diizinkan menghapus dokumen ini.');
            }
    
            Storage::disk('public')->delete($dokumen->path_file);
            $dokumen->delete();
    
            return back()->with('success', 'Dokumen berhasil dihapus.');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Http/Controllers/DosenController.php
Anda{
    public function loginForm()
        {
            return view('dosen.login');
        }
    
        public function login(Request $request)
        {
            $request->validate([
                'email' => 'required|email',
                'password' => 'required',
            ]);
    
            $credentials = $request->only('email', 'password');
            $credentials['role'] = 'dosen'; // Tambahkan role ke credentials
    
            if (Auth::attempt($credentials)) {
                $request->session()->regenerate();
    
                return redirect()->intended(route('dosen.dashboard'));
            }
    
            return back()->withErrors([
                'email' => 'Email atau password salah.',
            ]);
        }
    
        public function dashboard()
        {
            $user = Auth::user();
            // Memastikan user yang login memiliki relasi ke model Dosen
            $dosen = $user->dosen;
    
            // Jika tidak ada objek Dosen terkait, handle error atau redirect
            if (!$dosen) {
                Auth::logout();
                return redirect()->route('dosen.login')->with('error', 'Profil dosen tidak ditemukan.');
            }
    
            // Ambil notifikasi yang belum dibaca untuk user ini
            $unreadNotifications = $user->unreadNotifications;
    
            // Ambil sidang di mana dosen ini terlibat dan statusnya masih 'dosen_ditunjuk'
            // (menunggu persetujuan dosen)
            $sidangInvitations = Sidang::where(function($query) use ($dosen) {
                                    $query->where('ketua_sidang_dosen_id', $dosen->id)
                                          ->where('persetujuan_ketua_sidang', 'pending');
                                })->orWhere(function($query) use ($dosen) {
                                    $query->where('sekretaris_sidang_dosen_id', $dosen->id)
                                          ->where('persetujuan_sekretaris_sidang', 'pending');
                                })->orWhere(function($query) use ($dosen) {
                                    $query->where('anggota1_sidang_dosen_id', $dosen->id)
                                          ->where('persetujuan_anggota1_sidang', 'pending');
                                })->orWhere(function($query) use ($dosen) {
                                    $query->where('anggota2_sidang_dosen_id', $dosen->id)
                                          ->where('persetujuan_anggota2_sidang', 'pending');
                                })->orWhere(function($query) use ($dosen) {
                                    $query->where('dosen_pembimbing_id', $dosen->id)
                                          ->where('persetujuan_dosen_pembimbing', 'pending');
                                })->orWhere(function($query) use ($dosen) {
                                    $query->where('dosen_penguji1_id', $dosen->id) // Ini adalah pembimbing 2
                                          ->where('persetujuan_dosen_penguji1', 'pending');
                                })
                                ->with([
                                    'pengajuan.mahasiswa',
                                    'ketuaSidang', // Load ini
                                    'sekretarisSidang', // Load ini
                                    'anggota1Sidang', // Load ini
                                    'anggota2Sidang', // Load ini
                                    'dosenPembimbing', // Load ini
                                    'dosenPenguji1' // Load ini (jika digunakan sebagai pembimbing 2)
                                ]) // Load relasi yang diperlukan
                                ->get();
    
    
            return view('dosen.dashboard', compact('unreadNotifications', 'sidangInvitations'));
        }
    
        public function logout(Request $request)
        {
            Auth::logout();
    
            $request->session()->invalidate();
    
            $request->session()->regenerateToken();
    
            return redirect('/'); // Redirect ke halaman utama atau halaman lain setelah logout
        }
    
        // Dibawah ini Pengajuan Sidang Methods
        public function daftarPengajuan()
        {
            // Method ini sepertinya untuk melihat SEMUA pengajuan, bukan yang melibatkan dosen
            // Jika tujuannya untuk semua, pastikan eager loading relasi sidang dan dosen di dalamnya
            $pengajuans = Pengajuan::with([
                'mahasiswa',
                'sidang.sekretarisSidang',
                'sidang.anggota1Sidang',
                'sidang.anggota2Sidang'
            ])->get();
    
            return view('dosen.pengajuan.index', compact('pengajuans'));
        }
    
        public function detailPengajuan(Pengajuan $pengajuan)
        {
            // Pastikan dosen yang login memiliki akses ke pengajuan ini (jika perlu)
            // Saya menambahkan eager loading di sini agar semua informasi dosen di sidang
            // tersedia di view detail pengajuan.
            $pengajuan->load([
                'mahasiswa',
                'dokumens',
                'sidang.ketuaSidang',
                'sidang.sekretarisSidang',
                'sidang.anggota1Sidang',
                'sidang.anggota2Sidang',
            ]);
    
            return view('dosen.pengajuan.show', compact('pengajuan')); // Dokumen sudah dimuat via relasi pengajuan->dokumens
        }
    
        // Method untuk menandai notifikasi sudah dibaca
        public function markNotificationAsRead(DatabaseNotification $notification)
        {
            // Pastikan notifikasi ini milik user yang sedang login
            if (Auth::id() !== $notification->notifiable_id) {
                abort(403, 'Unauthorized action.');
            }
            $notification->markAsRead();
            return back()->with('success', 'Notifikasi ditandai sudah dibaca.');
        }
    
        // Helper method untuk mengecek status persetujuan semua dosen dan update status pengajuan
        protected function checkAndSetPengajuanStatus(Sidang $sidang)
        {
            $allDosenResponded = true;
            $allDosenAgreed = true;
    
            $rolesToCheck = [
                'ketua_sidang' => $sidang->ketua_sidang_dosen_id,
                'sekretaris_sidang' => $sidang->sekretaris_sidang_dosen_id,
                'anggota1_sidang' => $sidang->anggota1_sidang_dosen_id,
                'anggota2_sidang' => $sidang->anggota2_sidang_dosen_id, // ini bisa null
                'dosen_pembimbing' => $sidang->dosen_pembimbing_id,
                'dosen_penguji1' => $sidang->dosen_penguji1_id, // pembimbing 2
            ];
    
            foreach ($rolesToCheck as $role => $dosenId) {
                if ($dosenId !== null) { // Hanya cek jika peran dosen ini diisi
                    $persetujuanKolom = 'persetujuan_' . $role;
                    if ($sidang->$persetujuanKolom === 'pending') {
                        $allDosenResponded = false;
                        break; // Keluar dari loop jika ada yang belum merespon
                    }
                    if ($sidang->$persetujuanKolom === 'tolak') {
                        $allDosenAgreed = false;
                        break; // Keluar jika ada yang menolak
                    }
                }
            }
    
            if ($allDosenResponded) {
                if ($allDosenAgreed) {
                    // Semua sudah merespon dan semua setuju
                    $sidang->pengajuan->update(['status' => 'dosen_menyetujui']);
                } else {
                    // Semua sudah merespon tapi ada yang menolak
                    $sidang->pengajuan->update(['status' => 'dosen_menolak_jadwal']); // Status baru jika ada yang menolak
                    // Mungkin kirim notifikasi ke Kaprodi bahwa ada dosen yang menolak
                }
            }
            // Jika belum semua merespon, status pengajuan tidak berubah (tetap 'dosen_ditunjuk')
        }
    
        // --- METODE BARU UNTUK DAFTAR PENGAJUAN YANG MELIBATKAN DOSEN INI ---
        public function pengajuanSaya()
        {
            $user = Auth::user();
    
            // Pastikan user yang login memang terkait dengan model Dosen
            if (!$user || !$user->dosen) {
                return redirect()->route('dosen.dashboard')->with('error', 'Akses ditolak. Anda tidak terdaftar sebagai dosen.');
            }
    
            $dosenId = Auth::user()->dosen->id;
    
            // Mengambil pengajuan di mana dosen ini terlibat
            // Kita akan mencari di tabel 'sidangs' karena semua peran dosen ada di sana
            $pengajuansInvolved = Pengajuan::whereHas('sidang', function ($query) use ($dosenId) {
                $query->where('dosen_pembimbing_id', $dosenId)
                      ->orWhere('dosen_penguji1_id', $dosenId)
                      ->orWhere('dosen_penguji2_id', $dosenId)
                      ->orWhere('ketua_sidang_dosen_id', $dosenId)
                      ->orWhere('sekretaris_sidang_dosen_id', $dosenId)
                      ->orWhere('anggota1_sidang_dosen_id', $dosenId)
                      ->orWhere('anggota2_sidang_dosen_id', $dosenId);
            })
            ->with([
                'mahasiswa',
                'sidang.dosenPembimbing', // Eager load semua relasi dosen yang mungkin terkait
                'sidang.dosenPenguji1',
                'sidang.dosenPenguji2',
                'sidang.ketuaSidang',
                'sidang.sekretarisSidang',
                'sidang.anggota1Sidang',
                'sidang.anggota2Sidang'
            ])
            ->orderBy('updated_at', 'desc')
            ->get();
    
            return view('dosen.pengajuan.pengajuan_saya', compact('pengajuansInvolved'));
        }
        // --- AKHIR METODE BARU ---
    
    
        // Diabawah ini Validasi Dokumen Methods
        public function setujuiDokumen(Dokumen $dokumen)
        {
            // Pastikan dosen memiliki akses untuk memvalidasi dokumen ini (jika perlu)
            // Disarankan menambahkan logika otorisasi yang lebih kuat di sini.
            // Misalnya, hanya dosen pembimbing atau penguji yang bisa setujui dokumen TA/PKL tertentu.
            // if ($dokumen->pengajuan->sidang->dosenPembimbing->id !== Auth::user()->dosen->id) {
            //     abort(403, 'Anda tidak berhak menyetujui dokumen ini.');
            // }
    
            $dokumen->update(['status' => 'disetujui']);
            return redirect()->back()->with('success', 'Dokumen berhasil disetujui.');
        }
    
        public function tolakDokumen(Dokumen $dokumen)
        {
            // Pastikan dosen memiliki akses untuk memvalidasi dokumen ini (jika perlu)
            // Disarankan menambahkan logika otorisasi yang lebih kuat di sini.
            // if ($dokumen->pengajuan->sidang->dosenPembimbing->id !== Auth::user()->dosen->id) {
            //     abort(403, 'Anda tidak berhak menolak dokumen ini.');
            // }
    
            $dokumen->update(['status' => 'ditolak']);
            return redirect()->back()->with('success', 'Dokumen berhasil ditolak.');
        }
    
        // DIbawah ini Penjadwalan Sidang Methods
        public function formJadwalSidang(Pengajuan $pengajuan)
        {
            // Pastikan dosen memiliki akses untuk menjadwalkan sidang ini (jika perlu)
            // Misalnya, hanya ketua sidang yang bisa menjadwalkan.
            // if ($pengajuan->sidang && $pengajuan->sidang->ketua_sidang_dosen_id !== Auth::user()->dosen->id) {
            //      abort(403, 'Anda tidak berhak menjadwalkan sidang ini.');
            // }
    
            return view('dosen.jadwal.create', compact('pengajuan'));
        }
    
        public function simpanJadwalSidang(Request $request, Pengajuan $pengajuan)
        {
            $request->validate([
                'tanggal_waktu_sidang' => 'required|date', // Gunakan satu kolom dateTime
                'ruangan_sidang' => 'required|string|max:255',
            ]);
    
            // Pastikan record sidang sudah ada atau dibuat.
            // Dosen yang menjadwalkan mungkin hanya mengisi tanggal/ruangan.
            // Dosen pembimbing/penguji/anggota biasanya sudah ditetapkan Admin/Kaprodi.
            $sidang = $pengajuan->sidang ?? new Sidang(); // Ambil sidang jika sudah ada, atau buat baru
            $sidang->pengajuan_id = $pengajuan->id; // Pastikan terhubung ke pengajuan
            $sidang->tanggal_waktu_sidang = $request->tanggal_waktu_sidang;
            $sidang->ruangan_sidang = $request->ruangan_sidang;
            $sidang->save();
    
            // Implementasi pengiriman email notifikasi di sini jika diperlukan
            // Contoh:
            // if (class_exists('App\Mail\JadwalSidangNotification')) {
            //     $dosenPenguji1 = $sidang->dosenPenguji1;
            //     if ($dosenPenguji1) {
            //         Mail::to($dosenPenguji1->email)->send(new JadwalSidangNotification($sidang));
            //     }
            // }
    
    
            // Log aktivitas (Anda perlu mengimplementasikan fungsi logActivity() ini)
            // if (function_exists('logActivity')) {
            //     logActivity('Membuat jadwal sidang untuk: ' . $pengajuan->mahasiswa->nama_lengkap, 'Penjadwalan');
            // }
    
    
            return redirect()->route('dosen.pengajuan.show', $pengajuan->id)->with('success', 'Jadwal sidang berhasil dibuat.');
        }
    
        public function detailJadwalSidang(Sidang $sidang)
        {
            // Pastikan dosen memiliki akses untuk melihat detail jadwal ini (jika perlu)
            $sidang->load([
                'pengajuan.mahasiswa',
                'ketuaSidang',
                'sekretarisSidang',
                'anggota1Sidang',
                'anggota2Sidang',
                'dosenPembimbing',
                'dosenPenguji1',
                'dosenPenguji2'
            ]);
    
            return view('dosen.jadwal.show', compact('sidang'));
        }
    
        // Dibawah ini Penilaian Sidang Methods
        public function unduhLaporan(Sidang $sidang)
        {
            // Pastikan dosen memiliki akses untuk mengunduh laporan ini (misalnya, dosen penguji)
    
            // Asumsi: Path file laporan TA disimpan di tabel 'dokumens' dengan jenis tertentu
            $laporan = Dokumen::where('pengajuan_id', $sidang->pengajuan_id)
                              ->where('jenis_dokumen', 'Laporan TA') // Sesuaikan jenis dokumen Anda
                              ->first();
    
            if (!$laporan || !Storage::exists($laporan->path_file)) {
                abort(404, 'Laporan Tugas Akhir tidak ditemukan atau file tidak ada.');
            }
    
            // Pastikan path_file tidak dimulai dengan 'public/' jika Anda menyimpannya demikian.
            // Storage::download() akan otomatis mencari di default disk.
            return Storage::download($laporan->path_file, $laporan->nama_file);
        }
    
        public function formNilaiSidang(Sidang $sidang)
        {
            // Pastikan dosen memiliki akses untuk menilai sidang ini
            // Misalnya, hanya pembimbing atau penguji yang bisa memberi nilai
            $dosenId = Auth::user()->dosen->id;
            if (!in_array($dosenId, [
                $sidang->dosen_pembimbing_id,
                $sidang->dosen_penguji1_id,
                $sidang->dosen_penguji2_id
            ])) {
                abort(403, 'Anda tidak berhak memberikan nilai pada sidang ini.');
            }
    
            return view('dosen.sidang.nilai.edit', compact('sidang'));
        }
    
        public function simpanNilaiSidang(Request $request, Sidang $sidang)
        {
            // Validasi input nilai
            // Sesuaikan kolom nilai yang ada di tabel 'sidangs' Anda
            $request->validate([
                'nilai_sidang' => 'required|numeric|min:0|max:100', // Contoh: nilai total sidang
                // Anda mungkin memiliki kolom nilai_pembimbing, nilai_penguji1, nilai_penguji2, dll.
                // Sesuaikan validasi dengan struktur tabel Anda.
                // 'nilai_pembimbing' => 'required|numeric',
                // 'nilai_penguji_1' => 'required|numeric',
                // 'nilai_penguji_2' => 'required|numeric',
                'catatan_sidang' => 'nullable|string', // Kolom catatan tambahan
            ]);
    
            // Simpan nilai ke tabel 'sidangs'
            $sidang->update([
                'nilai_sidang' => $request->nilai_sidang,
                // 'nilai_pembimbing' => $request->nilai_pembimbing,
                // 'nilai_penguji_1' => $request->nilai_penguji_1,
                // 'nilai_penguji_2' => $request->nilai_penguji_2,
                'catatan_sidang' => $request->catatan_sidang,
                'hasil_sidang' => ($request->nilai_sidang >= 60) ? 'Lulus' : 'Tidak Lulus', // Contoh logika hasil sidang
            ]);
    
            // Log aktivitas (Anda perlu mengimplementasikan fungsi logActivity() ini)
            // if (function_exists('logActivity')) {
            //     logActivity('Memasukkan nilai sidang untuk: ' . $sidang->pengajuan->mahasiswa->nama_lengkap, 'Penilaian Sidang');
            // }
    
            return redirect()->route('dosen.sidang.nilai.edit', $sidang->id)->with('success', 'Nilai sidang berhasil disimpan.');
        }
    
        // Method untuk menampilkan form impor
        public function importForm()
        {
            return view('admin.dosen.import'); // Buat view ini nanti
        }
    
        // Method untuk memproses file Excel
        public function import(Request $request)
        {
            $request->validate([
                'file' => 'required|mimes:xls,xlsx,csv|max:2048', // Validasi file Excel
            ]);
    
            try {
                Excel::import(new DosenImport, $request->file('file')); // Proses impor
                return redirect()->back()->with('success', 'Data dosen berhasil diimpor!');
            } catch (\Maatwebsite\Excel\Validators\ValidationException $e) {
                $failures = $e->failures();
                $errors = [];
                foreach ($failures as $failure) {
                    $errors[] = 'Baris ' . $failure->row() . ': ' . implode(', ', $failure->errors());
                }
                return redirect()->back()->with('error', 'Gagal mengimpor data dosen. Ada kesalahan validasi: ' . implode('; ', $errors));
            } catch (\Exception $e) {
                // Tangani error umum lainnya
                return redirect()->back()->with('error', 'Terjadi kesalahan saat mengimpor data dosen: ' . $e->getMessage());
            }
        }
    
        public function formResponSidang(Sidang $sidang)
        {
            $dosen = Auth::user()->dosen;
    
            // Pastikan dosen yang login adalah salah satu anggota sidang ini
            // dan status persetujuannya masih 'pending'
            if (
                ($sidang->ketua_sidang_dosen_id === $dosen->id && $sidang->persetujuan_ketua_sidang === 'pending') ||
                ($sidang->sekretaris_sidang_dosen_id === $dosen->id && $sidang->persetujuan_sekretaris_sidang === 'pending') ||
                ($sidang->anggota1_sidang_dosen_id === $dosen->id && $sidang->persetujuan_anggota1_sidang === 'pending') ||
                ($sidang->anggota2_sidang_dosen_id === $dosen->id && $sidang->persetujuan_anggota2_sidang === 'pending') ||
                ($sidang->dosen_pembimbing_id === $dosen->id && $sidang->persetujuan_dosen_pembimbing === 'pending') ||
                ($sidang->dosen_penguji1_id === $dosen->id && $sidang->persetujuan_dosen_penguji1 === 'pending')
            ) {
                // Load relasi yang diperlukan untuk tampilan form
                $sidang->load('pengajuan.mahasiswa', 'ketuaSidang', 'sekretarisSidang', 'anggota1Sidang', 'anggota2Sidang', 'dosenPembimbing', 'dosenPenguji1');
                return view('dosen.respon_sidang', compact('sidang', 'dosen'));
            }
    
            // Jika dosen tidak terkait atau sudah merespon
            return redirect()->route('dosen.dashboard')->with('error', 'Anda tidak memiliki akses ke undangan sidang ini atau sudah merespon.');
        }
    
        public function submitResponSidang(Request $request, Sidang $sidang)
        {
            $request->validate([
                'respon' => 'required|in:setuju,tolak',
                'catatan' => 'nullable|string|max:500',
            ]);
    
            $dosen = Auth::user()->dosen;
            $respon = $request->respon;
            $catatan = $request->catatan;
            $peranDosen = null;
    
            // Tentukan peran dosen dan update status persetujuan
            if ($sidang->ketua_sidang_dosen_id === $dosen->id && $sidang->persetujuan_ketua_sidang === 'pending') {
                $sidang->persetujuan_ketua_sidang = $respon;
                $peranDosen = 'Ketua Sidang';
            } elseif ($sidang->sekretaris_sidang_dosen_id === $dosen->id && $sidang->persetujuan_sekretaris_sidang === 'pending') {
                $sidang->persetujuan_sekretaris_sidang = $respon;
                $peranDosen = 'Sekretaris Sidang';
            } elseif ($sidang->anggota1_sidang_dosen_id === $dosen->id && $sidang->persetujuan_anggota1_sidang === 'pending') {
                $sidang->persetujuan_anggota1_sidang = $respon;
                $peranDosen = 'Anggota Sidang 1';
            } elseif ($sidang->anggota2_sidang_dosen_id === $dosen->id && $sidang->persetujuan_anggota2_sidang === 'pending') {
                $sidang->persetujuan_anggota2_sidang = $respon;
                $peranDosen = 'Anggota Sidang 2';
            } elseif ($sidang->dosen_pembimbing_id === $dosen->id && $sidang->persetujuan_dosen_pembimbing === 'pending') {
                $sidang->persetujuan_dosen_pembimbing = $respon;
                $peranDosen = 'Dosen Pembimbing 1';
            } elseif ($sidang->dosen_penguji1_id === $dosen->id && $sidang->persetujuan_dosen_penguji1 === 'pending') {
                $sidang->persetujuan_dosen_penguji1 = $respon;
                $peranDosen = 'Dosen Pembimbing 2'; // Atau Dosen Penguji 1 sesuai konvensi Anda
            } else {
                return back()->with('error', 'Anda tidak dapat merespon undangan ini lagi atau tidak terkait.');
            }
    
            $sidang->save();
    
            // Anda bisa menambahkan logika notifikasi ke Kaprodi di sini,
            // misal: Notifikasi::send($kaprodiUser, new DosenRespondedSidang($sidang, $dosen, $respon));
    
            // Jika semua dosen sudah setuju, ubah status pengajuan menjadi 'menunggu_finalisasi_kaprodi' atau 'dijadwalkan'
            // Ini contoh sederhana, Anda mungkin perlu logika yang lebih kompleks
            // untuk mengecek semua persetujuan:
            // if ($sidang->persetujuan_ketua_sidang === 'setuju' &&
            //     $sidang->persetujuan_sekretaris_sidang === 'setuju' &&
            //     $sidang->persetujuan_anggota1_sidang === 'setuju' &&
            //     // ... dan seterusnya untuk semua dosen yang terlibat ...
            // ) {
            //     $sidang->pengajuan->status = 'dosen_menyetujui_jadwal'; // Status baru di pengajuan
            //     $sidang->pengajuan->save();
            // }
    
    
            return redirect()->route('dosen.dashboard')->with('success', "Respon Anda sebagai {$peranDosen} ($respon) berhasil disimpan.");
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Http/Controllers/KajurController.php
KajurController{
    public function loginForm()
        {
            return view('kajur.login');
        }
    
        public function login(Request $request)
        {
            $request->validate([
                'email' => 'required|email',
                'password' => 'required',
            ]);
    
            $credentials = $request->only('email', 'password');
            $credentials['role'] = 'kajur'; // Tambahkan role ke credentials
    
            if (Auth::attempt($credentials)) {
                $request->session()->regenerate();
    
                return redirect()->intended(route('kajur.dashboard'));
            }
    
            return back()->withErrors([
                'email' => 'Email atau password salah.',
            ]);
        }
    
        public function dashboard()
        {
            return view('kajur.dashboard');
        }
    
        public function logout(Request $request)
        {
            Auth::logout();
    
            $request->session()->invalidate();
    
            $request->session()->regenerateToken();
    
            return redirect('/'); // Redirect ke halaman utama atau halaman lain setelah logout
        }
    
        // Dibawah ini method
        public function index()
        {
            // Logika untuk menampilkan ringkasan data di dashboard Kajur
            $jumlahSidangSedang = Sidang::whereDate('tanggal_waktu_sidang', Carbon::today())->count();
            $jumlahSidangTelah = Sidang::whereDate('tanggal_waktu_sidang', '<', Carbon::today())->count();
            $jumlahSidangAkan = Sidang::whereDate('tanggal_waktu_sidang', '>', Carbon::today())->count();
    
            // Ambil daftar pengajuan dengan status 'siap_sidang_kajur'
            $pengajuanSiapSidang = Pengajuan::where('status', 'siap_sidang_kajur')->get();
    
            return view('kajur.dashboard', compact(
                'jumlahSidangSedang',
                'jumlahSidangTelah',
                'jumlahSidangAkan',
                'pengajuanSiapSidang' // Kirim data ini ke view
            ));
        }
    
        public function daftarPengajuanVerifikasi()
        {
            $pengajuanSiapSidang = Pengajuan::where('status', 'siap_sidang_kajur')->get();
            return view('kajur.pengajuan.perlu_verifikasi', compact('pengajuanSiapSidang'));
        }
    
        public function daftarPengajuanTerverifikasi()
        {
            // Hanya muat relasi 'mahasiswa' karena 'jenis_pengajuan' adalah kolom langsung
            $pengajuanTerverifikasi = Pengajuan::with('mahasiswa')
                                              ->where('status', 'diverifikasi_kajur')
                                              ->get();
    
            return view('kajur.pengajuan.sudah_verifikasi', compact('pengajuanTerverifikasi'));
        }
    
        public function daftarSidangSedang()
        {
            $sidangs = Sidang::whereDate('tanggal_waktu_sidang', Carbon::today())->get();
            return view('kajur.sidang.sedang', compact('sidangs'));
        }
    
        public function daftarSidangTelah()
        {
            $sidangs = Sidang::where('tanggal_sidang', '<', Carbon::today())->get();
            return view('kajur.sidang.telah', compact('sidangs'));
        }
    
        public function daftarSidangAkan()
        {
            $sidangs = Sidang::whereDate('tanggal_waktu_sidang', '>', Carbon::today())->get();
            return view('kajur.sidang.akan', compact('sidangs'));
        }
    
        public function detailSidang(Sidang $sidang)
        {
            // Eager load necessary relationships
            $sidang->load([
                'pengajuan.mahasiswa', // Load pengajuan and its mahasiswa
                'dosenPembimbing',
                'dosenPenguji1',
                'dosenPenguji2',
                // Add other relationships if you want to display ketuaSidang, sekretarisSidang, etc.
                'ketuaSidang',
                'sekretarisSidang',
                'anggota1Sidang',
                'anggota2Sidang',
            ]);
    
            return view('kajur.sidang.show', compact('sidang'));
        }
    
        public function showVerifikasiForm(Pengajuan $pengajuan)
        {
            // Pastikan hanya pengajuan dengan status 'siap_sidang_kajur' yang bisa diverifikasi
            if ($pengajuan->status !== 'siap_sidang_kajur') {
                return redirect()->route('kajur.dashboard')->with('error', 'Pengajuan ini tidak dalam status siap verifikasi oleh Kajur.');
            }
    
            return view('kajur.pengajuan.verifikasi', compact('pengajuan'));
        }
    
        public function verifikasiPengajuan(Request $request, Pengajuan $pengajuan)
        {
            // Validasi opsional jika ada input tambahan dari form
            // $request->validate([
            //     // 'catatan_verifikasi' => 'nullable|string',
            // ]);
    
            // Pastikan hanya pengajuan dengan status 'siap_sidang_kajur' yang bisa diverifikasi
            if ($pengajuan->status !== 'siap_sidang_kajur') {
                return redirect()->route('kajur.dashboard')->with('error', 'Pengajuan ini tidak dalam status siap verifikasi oleh Kajur.');
            }
    
            // Proses verifikasi
            try {
                DB::beginTransaction(); // Mulai transaksi database
    
                $pengajuan->status = 'diverifikasi_kajur'; // Ubah status pengajuan
                // Anda bisa menambahkan kolom lain jika ada, misalnya id kajur yang memverifikasi
                // $pengajuan->verified_by_kajur_id = auth()->user()->id;
                // $pengajuan->verified_at = now();
                $pengajuan->save();
    
                DB::commit(); // Komit transaksi
    
                return redirect()->route('kajur.dashboard')->with('success', 'Pengajuan berhasil diverifikasi oleh Kajur.');
    
            } catch (\Exception $e) {
                DB::rollBack(); // Rollback transaksi jika ada error
                return redirect()->back()->with('error', 'Terjadi kesalahan saat memverifikasi pengajuan: ' . $e->getMessage());
            }
        }
    
        public function showPengajuanDetail(Pengajuan $pengajuan)
        {
            // Eager load necessary relationships for the detail view
            // For example, if you want to show student details and supervisor details
            $pengajuan->load(['mahasiswa', 'dosenPembimbing', 'dosenPenguji1', 'dosenPenguji2']);
    
            return view('kajur.pengajuan.detail', compact('pengajuan'));
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Http/Controllers/KaprodiController.php
KaprodiController{
    // Method untuk menampilkan form login Kaprodi
        public function loginForm()
        {
            return view('kaprodi.auth.login'); // Asumsi view login ada di kaprodi/auth/login.blade.php
        }
    
        // Method untuk memproses login Kaprodi
        public function login(Request $request)
        {
            $credentials = $request->validate([
                'email' => 'required|email',
                'password' => 'required',
            ]);
    
            if (Auth::attempt($credentials)) {
                $user = Auth::user();
                if ($user->role === 'kaprodi') {
                    $request->session()->regenerate();
                    return redirect()->intended(route('kaprodi.dashboard'));
                } else {
                    Auth::logout();
                    return back()->withErrors([
                        'email' => 'Anda tidak memiliki akses sebagai Kaprodi.',
                    ]);
                }
            }
    
            return back()->withErrors([
                'email' => 'Kombinasi email dan password salah.',
            ]);
        }
    
        // Method untuk logout Kaprodi
        public function logout(Request $request)
        {
            Auth::logout();
            $request->session()->invalidate();
            $request->session()->regenerateToken();
            return redirect()->route('kaprodi.login')->with('success', 'Anda telah berhasil logout.');
        }
    
        // Method untuk dashboard Kaprodi
        public function dashboard()
        {
            // 1. Ambil Jumlah Dosen
            $jumlahDosen = Dosen::count();
    
            // 2. Ambil Jumlah Pengajuan Baru (misalnya yang statusnya 'diverifikasi_admin')
            // Sesuaikan status ini berdasarkan alur kerja Anda.
            // Asumsi 'diverifikasi_admin' adalah status ketika pengajuan sudah diverifikasi admin dan siap untuk kaprodi.
            $jumlahPengajuan = Pengajuan::where('status', 'diverifikasi_admin')->count();
    
            // 3. Ambil Pengajuan Terbaru (misalnya 5 pengajuan terbaru dengan status 'diverifikasi_admin')
            // Eager load relasi 'mahasiswa' jika Anda ingin menampilkan nama mahasiswa di view
            $pengajuanBaru = Pengajuan::where('status', 'diverifikasi_admin')
                                    ->with('mahasiswa')
                                    ->latest() // Mengurutkan berdasarkan created_at secara descending
                                    ->take(5) // Mengambil 5 data terbaru
                                    ->get();
    
    
            // Kirim semua data ini ke view
            return view('kaprodi.dashboard', compact('jumlahDosen', 'jumlahPengajuan', 'pengajuanBaru'));
        }
    
        // Method untuk menampilkan daftar dosen
        public function daftarDosen()
        {
            $dosens = Dosen::orderBy('nama')->get();
            return view('kaprodi.dosen.index', compact('dosens'));
        }
    
        // --- Pengajuan-related methods ---
    
        // Menampilkan daftar pengajuan yang perlu ditinjau Kaprodi
        public function indexPengajuan()
        {
            // 1. Ambil pengajuan yang sedang menunggu aksi Kaprodi
            $pengajuansKaprodi = Pengajuan::where('status', 'diverifikasi_admin')
                                        ->orWhere('status', 'menunggu_persetujuan_dosen')
                                        ->with('mahasiswa')
                                        ->orderBy('created_at', 'desc')
                                        ->paginate(10); // Atau gunakan get() jika tidak ada pagination di bagian ini
    
            // 2. Ambil pengajuan yang telah selesai ditangani oleh Kaprodi
            // Status 'sidang_dijadwalkan_final' berarti sudah difinalisasi Kaprodi.
            // Status 'ditolak_kaprodi' berarti sudah ditolak Kaprodi.
            $pengajuansSelesaiKaprodi = Pengajuan::whereIn('status', ['sidang_dijadwalkan_final', 'ditolak_kaprodi'])
                                                ->with('mahasiswa') // Eager load relasi mahasiswa
                                                ->orderBy('updated_at', 'desc') // Urutkan berdasarkan update terakhir
                                                ->get(); // Atau gunakan paginate(10) jika Anda ingin pagination di bagian ini juga
    
    
            // Kirim kedua set data ke view
            return view('kaprodi.pengajuan.index', compact('pengajuansKaprodi', 'pengajuansSelesaiKaprodi'));
        }
    
        // Menampilkan detail pengajuan
        public function showPengajuan(Pengajuan $pengajuan)
        {
            // Eager load relasi yang diperlukan untuk detail
            // Pastikan semua relasi dosen pada Sidang di-load.
            // 'sidang.dosenPembimbing', 'sidang.dosenPenguji1' juga perlu di-load
            // karena mereka digunakan di view.
            $pengajuan->load([
                'mahasiswa',
                'dokumens',
                'sidang.ketuaSidang',
                'sidang.sekretarisSidang',
                'sidang.anggota1Sidang',
                'sidang.anggota2Sidang',
                'sidang.dosenPembimbing', // Pastikan ini ada
                'sidang.dosenPenguji1'   // Pastikan ini ada (Pembimbing 2/Penguji 1)
            ]);
        
            // Ambil daftar dosen untuk dropdown di form penjadwalan
            $dosens = Dosen::orderBy('nama')->get(); // Menggunakan 'nama' sesuai model Dosen
        
            return view('kaprodi.pengajuan.show', compact('pengajuan', 'dosens'));
        }
    
        public function showAksiKaprodi(Pengajuan $pengajuan)
        {
            // Pastikan relasi sidang sudah ada atau buat jika belum
            // Ini memastikan $pengajuan->sidang selalu tersedia
            if (!$pengajuan->sidang) {
                $sidang = new Sidang();
                $sidang->pengajuan_id = $pengajuan->id;
                $sidang->save();
                $pengajuan->load('sidang'); // Reload pengajuan untuk mendapatkan relasi sidang yang baru
            }
    
            // Eager load relasi yang diperlukan untuk form aksi
            $pengajuan->load([
                'mahasiswa',
                'sidang.ketuaSidang',
                'sidang.sekretarisSidang',
                'sidang.anggota1Sidang',
                'sidang.anggota2Sidang',
                'sidang.dosenPembimbing',
                'sidang.dosenPenguji1'
            ]);
    
            // Ambil daftar dosen untuk dropdown di form penjadwalan
            $dosens = Dosen::orderBy('nama')->get();
    
            return view('kaprodi.pengajuan.aksi', compact('pengajuan', 'dosens'));
        }
    
        // Menampilkan form untuk menjadwalkan/mengedit jadwal sidang
        public function jadwalkanSidangForm(Pengajuan $pengajuan)
        {
            // Kaprodi dapat menjadwalkan jika statusnya 'diverifikasi_admin' (setelah admin memverifikasi dokumen),
            // atau jika statusnya 'siap_dijadwalkan_kaprodi' (setelah kaprodi menyetujui),
            // atau jika statusnya 'dosen_ditunjuk' (untuk edit jadwal yang sudah ada).
            if (!in_array($pengajuan->status, ['diverifikasi_admin', 'siap_dijadwalkan_kaprodi', 'dosen_ditunjuk'])) {
                return redirect()->route('kaprodi.pengajuan.index')->with('error', 'Pengajuan ini tidak dapat dijadwalkan pada tahap ini.');
            }
    
            $dosens = Dosen::orderBy('nama')->get();
            $sidang = $pengajuan->sidang; 
    
            // View yang cocok adalah 'jadwal_sidang_form.blade.php'
            return view('kaprodi.pengajuan.jadwal_sidang_form', compact('pengajuan', 'dosens', 'sidang'));
        }
    
        // Menyimpan atau memperbarui jadwal sidang
        public function storeUpdateJadwalSidang(Request $request, Pengajuan $pengajuan)
        {
            $validatedData = $request->validate([
                'sekretaris_sidang_id' => 'required|exists:dosens,id',
                'anggota_1_sidang_id' => 'required|exists:dosens,id',
                'anggota_2_sidang_id' => 'nullable|exists:dosens,id', // Opsional
                'tanggal_waktu_sidang' => 'required|date|after_or_equal:now',
                'ruangan_sidang' => 'required|string|max:255',
            ]);
        
            // Pastikan tidak ada duplikasi dosen (antara yang dipilih di form dan pembimbing/penguji dari mahasiswa)
            // Ambil ID dosen yang sedang login (Kaprodi)
            //$kaprodiDosenId = $request->user()->dosen->id; // Ambil ID Dosen dari user yang login
        
            // Gabungkan semua ID dosen yang terlibat
            $allInvolvedDosenIds = array_filter([
                //$kaprodiDosenId, // Kaprodi sebagai Ketua Sidang
                $validatedData['sekretaris_sidang_id'],
                $validatedData['anggota_1_sidang_id'],
                $validatedData['anggota_2_sidang_id'],
                $pengajuan->mahasiswa->pembimbing1_id, // Pembimbing 1 mahasiswa
                $pengajuan->mahasiswa->pembimbing2_id, // Pembimbing 2 mahasiswa
            ]);
        
            // Cek duplikasi
            if (count($allInvolvedDosenIds) !== count(array_unique($allInvolvedDosenIds))) {
                // Identifikasi dosen mana yang duplikat untuk pesan yang lebih informatif
                $duplicateDosenNames = [];
                $dosenNames = Dosen::whereIn('id', $allInvolvedDosenIds)->pluck('nama', 'id');
                $counts = array_count_values($allInvolvedDosenIds);
                foreach ($counts as $id => $count) {
                    if ($count > 1) {
                        $duplicateDosenNames[] = $dosenNames[$id] ?? 'Dosen ID: ' . $id;
                    }
                }
                return back()->withErrors(['dosen_duplikat' => 'Dosen yang ditunjuk tidak boleh sama: ' . implode(', ', $duplicateDosenNames) . '. Pastikan Dosen Ketua, Sekretaris, Anggota, dan Pembimbing/Penguji berbeda satu sama lain.']);
            }
        
            DB::beginTransaction();
            try {
                $sidang = $pengajuan->sidang()->firstOrNew(['pengajuan_id' => $pengajuan->id]);
            
                // Tetapkan ID Dosen dari user yang login sebagai Ketua Sidang
                //$sidang->ketua_sidang_dosen_id = $kaprodiDosenId;
            
                // Tetapkan ID Pembimbing dari Mahasiswa (ini tidak berubah dari pengajuan)
                //$sidang->dosen_pembimbing_id = $pengajuan->mahasiswa->pembimbing1_id;
                //$sidang->dosen_penguji1_id = $pengajuan->mahasiswa->pembimbing2_id; // Ini akan menjadi Pembimbing 2/Penguji 1
            
                // Tetapkan ID Dosen lainnya dari form
                $sidang->sekretaris_sidang_dosen_id = $validatedData['sekretaris_sidang_id'];
                $sidang->anggota1_sidang_dosen_id = $validatedData['anggota_1_sidang_id'];
                $sidang->anggota2_sidang_dosen_id = $validatedData['anggota_2_sidang_id']; // Bisa null jika opsional
            
                // Tetapkan detail jadwal
                $sidang->tanggal_waktu_sidang = $validatedData['tanggal_waktu_sidang'];
                $sidang->ruangan_sidang = $validatedData['ruangan_sidang'];
            
                $sidang->save();
            
                // Perbarui status pengajuan
                $pengajuan->status = 'menunggu_persetujuan_dosen';
                $pengajuan->save();
            
                DB::commit();
            
                return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                                 ->with('success', 'Jadwal sidang berhasil ' . ($sidang->wasRecentlyCreated ? 'ditentukan' : 'diperbarui') . '. Menunggu persetujuan dosen.');
            
            } catch (\Exception $e) {
                DB::rollBack();
                return back()->with('error', 'Gagal menentukan jadwal sidang: ' . $e->getMessage())->withInput();
            }
        }
    
        // Method untuk menyetujui pengajuan (setelah admin memverifikasi dokumen)
        public function setujuiPengajuan(Pengajuan $pengajuan)
        {
            if ($pengajuan->status !== 'diverifikasi_admin') {
                return back()->with('error', 'Pengajuan ini tidak dapat disetujui pada tahap ini.');
            }
    
            $pengajuan->update(['status' => 'siap_dijadwalkan_kaprodi']); // Status baru: siap dijadwalkan oleh Kaprodi
            // TODO: Kirim notifikasi ke admin atau pihak terkait jika diperlukan
            return redirect()->route('kaprodi.pengajuan.index')->with('success', 'Pengajuan berhasil disetujui untuk dijadwalkan.');
        }
    
        // Method untuk menolak pengajuan (setelah admin memverifikasi dokumen)
        public function tolakPengajuan(Request $request, Pengajuan $pengajuan)
        {
            if ($pengajuan->status !== 'diverifikasi_admin') {
                return back()->with('error', 'Pengajuan ini tidak dapat ditolak pada tahap ini.');
            }
    
            $request->validate([
                'alasan_penolakan' => 'required|string|max:500',
            ]);
    
            $pengajuan->update([
                'status' => 'ditolak_kaprodi',
                'alasan_penolakan_kaprodi' => $request->alasan_penolakan,
            ]);
    
            // TODO: Kirim notifikasi ke mahasiswa bahwa pengajuannya ditolak Kaprodi
            return redirect()->route('kaprodi.pengajuan.index')->with('success', 'Pengajuan berhasil ditolak.');
        }
    
        // Method untuk memfinalkan jadwal sidang setelah semua dosen menyetujui
        public function finalkanJadwal(Pengajuan $pengajuan)
        {
            $sidang = $pengajuan->sidang;
    
            // Pastikan sidang ada dan statusnya sudah 'dosen_ditunjuk' atau 'dosen_menyetujui'
            if (!$sidang || !in_array($pengajuan->status, ['dosen_ditunjuk', 'dosen_menyetujui', 'menunggu_persetujuan_dosen'])) {
                return back()->with('error', 'Jadwal sidang belum lengkap atau belum semua dosen menyetujui.');
            }
    
            // Logika untuk memeriksa apakah semua dosen wajib sudah menyetujui
            $allDosenAgreed = true;
    
            if ($sidang->ketua_sidang_dosen_id && $sidang->persetujuan_ketua_sidang !== 'setuju') {
                $allDosenAgreed = false;
            }
            if ($sidang->sekretaris_sidang_dosen_id && $sidang->persetujuan_sekretaris_sidang !== 'setuju') {
                $allDosenAgreed = false;
            }
            if ($sidang->anggota1_sidang_dosen_id && $sidang->persetujuan_anggota1_sidang !== 'setuju') {
                $allDosenAgreed = false;
            }
            if ($sidang->anggota2_sidang_dosen_id && $sidang->persetujuan_anggota2_sidang !== 'setuju' && $sidang->anggota2_sidang_dosen_id !== null) { // Anggota 2 opsional
                $allDosenAgreed = false;
            }
            if ($sidang->dosen_pembimbing_id && $sidang->persetujuan_dosen_pembimbing !== 'setuju') {
                $allDosenAgreed = false;
            }
            if ($sidang->dosen_penguji1_id && $sidang->persetujuan_dosen_penguji1 !== 'setuju') {
                $allDosenAgreed = false;
            }
    
            if ($allDosenAgreed) {
                $pengajuan->update(['status' => 'siap_sidang_kajur']); // Status baru: siap diverifikasi Kajur
                // TODO: Kirim notifikasi ke Kajur
                return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)->with('success', 'Jadwal sidang berhasil difinalisasi. Menunggu verifikasi Kajur.');
            } else {
                return back()->with('error', 'Belum semua dosen yang terlibat menyetujui jadwal sidang.');
            }
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Http/Controllers/MahasiswaController.php
MahasiswaController{
    public function loginForm()
        {
            return view('mahasiswa.login');
        }
    
        public function login(Request $request)
        {
            $request->validate([
                'email' => 'required|email',
                'password' => 'required',
            ]);
    
            $credentials = $request->only('email', 'password');
            $credentials['role'] = 'mahasiswa';
    
            if (Auth::attempt($credentials)) {
                $request->session()->regenerate();
                return redirect()->intended(route('mahasiswa.dashboard'));
            }
    
            return back()->withErrors([
                'email' => 'Email atau password salah.',
            ]);
        }
    
        public function dashboard()
        {
            if (!Auth::check()) {
                return redirect()->route('mahasiswa.login')->with('error', 'Silakan login terlebih dahulu.');
            }
    
            $mahasiswaId = Auth::id();
    
            $pengajuanTerbaru = Pengajuan::where('mahasiswa_id', $mahasiswaId)
                                          ->orderBy('created_at', 'desc')
                                          ->limit(5)
                                          ->get();
            $pengajuanTerbaru->load('mahasiswa', 'sidang');
    
            $jumlahPengajuan = Pengajuan::where('mahasiswa_id', $mahasiswaId)->count();
    
            return view('mahasiswa.dashboard', compact('pengajuanTerbaru', 'jumlahPengajuan'));
        }
    
        public function logout(Request $request)
        {
            Auth::logout();
            $request->session()->invalidate();
            $request->session()->regenerateToken();
            return redirect('/');
        }
    
        // Method untuk menampilkan form impor mahasiswa
        public function importForm()
        {
            return view('admin.mahasiswa.import'); // Buat view ini nanti
        }
    
        // Method untuk memproses file Excel mahasiswa
        public function import(Request $request)
        {
            $request->validate([
                'file' => 'required|mimes:xls,xlsx,csv|max:2048', // Validasi file Excel
            ]);
    
            try {
                Excel::import(new MahasiswaImport, $request->file('file')); // Proses impor
                return redirect()->back()->with('success', 'Data mahasiswa berhasil diimpor!');
            } catch (\Maatwebsite\Excel\Validators\ValidationException $e) {
                $failures = $e->failures();
                $errors = [];
                foreach ($failures as $failure) {
                    // Ambil header kolom yang menyebabkan kegagalan
                    $attribute = $failure->attribute();
                    $errorMessage = implode(', ', $failure->errors());
                    $errors[] = 'Baris ' . $failure->row() . ' (Kolom: ' . $attribute . '): ' . $errorMessage;
                }
                return redirect()->back()->with('error', 'Gagal mengimpor data mahasiswa. Ada kesalahan validasi: <ul><li>' . implode('</li><li>', $errors) . '</li></ul>');
            } catch (\Exception $e) {
                Log::error('Kesalahan impor mahasiswa umum: ' . $e->getMessage());
                return redirect()->back()->with('error', 'Terjadi kesalahan saat mengimpor data mahasiswa: ' . $e->getMessage());
            }
        }
    
        // Method Untuk Eksport Data Mahasiswa
        public function export()
        {
            // Nama file yang akan diunduh
            $fileName = 'data_mahasiswa_' . date('Ymd_His') . '.xlsx';
    
            // Unduh file Excel menggunakan kelas export yang sudah dibuat
            return Excel::download(new MahasiswaExport, $fileName);
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Http/Controllers/PengajuanController.php
PengajuanController{
    private function getLoggedInMahasiswa()
        {
            // Temukan Mahasiswa yang user_id-nya cocok dengan user yang sedang login
            return Mahasiswa::where('user_id', Auth::id())->firstOrFail();
        }
    
        public function pilihJenis()
        {
            if (!Auth::check() || Auth::user()->role !== 'mahasiswa') {
                return redirect()->route('mahasiswa.login')->with('error', 'Silakan login sebagai mahasiswa untuk mengakses halaman ini.');
            }
            return view('mahasiswa.pengajuan.pilih-jenis');
        }
    
        // Mengganti create_ta dan create_pkl menjadi satu metode create
        public function create($jenis)
        {
            if (!Auth::check() || Auth::user()->role !== 'mahasiswa') {
                return redirect()->route('mahasiswa.login')->with('error', 'Silakan login terlebih dahulu.');
            }
        
            if (!in_array($jenis, ['ta', 'pkl'])) {
                abort(404, 'Jenis pengajuan tidak valid.');
            }
        
            $mahasiswa = $this->getLoggedInMahasiswa(); 
        
            $pengajuanAktif = Pengajuan::where('mahasiswa_id', $mahasiswa->id)
                                        ->whereIn('status', ['diajukan_mahasiswa', 'diverifikasi_admin', 'dosen_ditunjuk', 'sedang_diproses'])
                                        ->first();
        
            if ($pengajuanAktif) {
                return redirect()->route('mahasiswa.pengajuan.index')
                                 ->with('error', 'Anda sudah memiliki pengajuan yang sedang diproses. Anda tidak dapat membuat pengajuan baru sampai pengajuan sebelumnya selesai atau dibatalkan.');
            }
        
            $dokumenSyarat = $this->getDokumenSyarat($jenis);
            $dosens = Dosen::orderBy('nama')->get(); // Tetap diperlukan untuk memilih pembimbing 1 & 2
            return view('mahasiswa.pengajuan.form', compact('jenis', 'dokumenSyarat', 'dosens'));
        }
    
        public function store(Request $request)
        {
            if (!Auth::check() || Auth::user()->role !== 'mahasiswa') { 
                return redirect()->route('mahasiswa.login')->with('error', 'Silakan login terlebih dahulu.');
            }
    
            $mahasiswa = $this->getLoggedInMahasiswa();
    
            $pengajuanAktif = Pengajuan::where('mahasiswa_id', $mahasiswa->id)
                                        ->whereIn('status', ['diajukan_mahasiswa', 'diverifikasi_admin', 'dosen_ditunjuk', 'sedang_diproses'])
                                        ->first();
    
            if ($pengajuanAktif) {
                return redirect()->route('mahasiswa.pengajuan.index')
                                 ->with('error', 'Anda sudah memiliki pengajuan yang sedang diproses. Anda tidak dapat membuat pengajuan baru sampai pengajuan sebelumnya selesai atau dibatalkan.');
            }
    
            $status = $request->input('action') === 'draft' ? 'draft' : 'diajukan_mahasiswa';
    
            $validationRules = [
                'jenis_pengajuan' => 'required|in:pkl,ta',
                // Mahasiswa memilih dosen pembimbing 1 (wajib)
                'dosen_pembimbing1_id' => $status === 'diajukan_mahasiswa' ? 'required|exists:dosens,id' : 'nullable|exists:dosens,id',
                // Mahasiswa memilih dosen pembimbing 2 (opsional, bisa jadi penguji 1)
                'dosen_pembimbing2_id' => 'nullable|exists:dosens,id|different:dosen_pembimbing1_id', // Pastikan berbeda dengan pembimbing 1
                'dokumen' => 'array',
            ];
    
            $dokumenSyaratList = $this->getDokumenSyarat($request->jenis_pengajuan);
    
            foreach ($dokumenSyaratList as $key => $namaDokumen) {
                $validationRules["dokumen.{$key}"] = ($status === 'diajukan_mahasiswa') ? 'required|file|mimes:pdf,jpg,jpeg,png|max:2048' : 'nullable|file|mimes:pdf,jpg,jpeg,png|max:2048';
            }
    
            $validator = Validator::make($request->all(), $validationRules);
    
            if ($validator->fails()) {
                return back()->withErrors($validator)->withInput();
            }
    
            $pengajuan = Pengajuan::create([
                'mahasiswa_id' => $mahasiswa->id,
                'jenis_pengajuan' => $request->jenis_pengajuan,
                'status' => $status,
            ]);
    
            // Buat entri sidang dengan dosen pembimbing yang dipilih mahasiswa
            $pengajuan->sidang()->create([
                'dosen_pembimbing_id' => $request->dosen_pembimbing1_id,
                'dosen_penguji1_id' => $request->dosen_pembimbing2_id, // Untuk sementara, gunakan ini sebagai Dosen Pembimbing 2
                'status' => 'belum_dijadwalkan', // Atau 'menunggu_verifikasi_admin'
            ]);
    
            // Upload dan simpan dokumen
            if ($request->has('dokumen')) {
                foreach ($request->file('dokumen') as $nama_dokumen_key => $file) {
                    if (array_key_exists($nama_dokumen_key, $dokumenSyaratList)) {
                        $originalFileName = Str::slug($dokumenSyaratList[$nama_dokumen_key]) . '_' . time() . '.' . $file->getClientOriginalExtension();
                        $path = $file->storeAs('dokumen_pengajuan/' . $pengajuan->id, $originalFileName, 'public');
    
                        Dokumen::create([
                            'pengajuan_id' => $pengajuan->id,
                            'nama_file' => $dokumenSyaratList[$nama_dokumen_key],
                            'path_file' => $path,
                            'status' => 'diajukan_mahasiswa',
                        ]);
                    }
                }
            }
    
            if ($status === 'draft') {
                return redirect()->route('mahasiswa.pengajuan.show', $pengajuan->id)->with('success', 'Pengajuan berhasil disimpan sebagai draft.');
            } else {
                return redirect()->route('mahasiswa.pengajuan.show', $pengajuan->id)->with('success', 'Pengajuan berhasil diajukan_mahasiswa dan akan segera diverifikasi!');
            }
        }
    
        public function show(Pengajuan $pengajuan)
        {
            if (!Auth::check() || Auth::user()->role !== 'mahasiswa') {
                return redirect()->route('mahasiswa.login')->with('error', 'Silakan login terlebih dahulu.');
            }
    
            $mahasiswa = $this->getLoggedInMahasiswa();
    
            if ($mahasiswa->id != $pengajuan->mahasiswa_id) {
                abort(403, 'Anda tidak diizinkan mengakses pengajuan ini.');
            }
    
            $pengajuan->load([
                'dokumens',
                'sidang.ketuaSidang',
                'sidang.sekretarisSidang',
                'sidang.anggota1Sidang',
                'sidang.anggota2Sidang',
            ]);
    
            return view('mahasiswa.pengajuan.show', compact('pengajuan'));
        }
    
        public function simpanSebagaiDraft(Request $request, Pengajuan $pengajuan)
        {
            if (!Auth::check() || Auth::user()->role !== 'mahasiswa') {
                return redirect()->route('mahasiswa.login')->with('error', 'Silakan login terlebih dahulu.');
            }
            $mahasiswa = $this->getLoggedInMahasiswa();
    
            if ($mahasiswa->id != $pengajuan->mahasiswa_id) {
                abort(403, 'Unauthorized');
            }
    
            $pengajuan->update(['status' => 'draft']);
    
            return redirect()->route('mahasiswa.pengajuan.show', $pengajuan->id)->with('success', 'Pengajuan berhasil diperbarui sebagai draft.');
        }
    
        public function edit(Pengajuan $pengajuan)
        {
            if (!Auth::check() || Auth::user()->role !== 'mahasiswa') {
                return redirect()->route('mahasiswa.login')->with('error', 'Silakan login terlebih dahulu.');
            }
            $mahasiswa = $this->getLoggedInMahasiswa();
    
            if ($mahasiswa->id != $pengajuan->mahasiswa_id) {
                abort(403, 'Unauthorized');
            }
    
            if ($pengajuan->status !== 'draft' && !in_array($pengajuan->status, ['ditolak_admin', 'ditolak_kaprodi'])) {
                return redirect()->route('mahasiswa.pengajuan.show', $pengajuan->id)
                                 ->with('error', 'Pengajuan sudah diajukan_mahasiswa dan tidak bisa diedit.');
            }
    
            $jenis = $pengajuan->jenis_pengajuan;
            $dokumenSyarat = $this->getDokumenSyarat($jenis);
            // Menggunakan keyBy 'nama_file' untuk memudahkan akses di view
            $dokumenTerupload = $pengajuan->dokumens->keyBy('nama_file');
            $dosens = Dosen::orderBy('nama')->get();
    
            return view('mahasiswa.pengajuan.edit', compact('pengajuan', 'jenis', 'dokumenSyarat', 'dokumenTerupload', 'dosens'));
        }
    
        public function update(Request $request, Pengajuan $pengajuan)
        {
            if (!Auth::check() || Auth::user()->role !== 'mahasiswa') {
                return redirect()->route('mahasiswa.login')->with('error', 'Silakan login terlebih dahulu.');
            }
            $mahasiswa = $this->getLoggedInMahasiswa();
        
            if ($mahasiswa->id != $pengajuan->mahasiswa_id) {
                abort(403, 'Unauthorized');
            }
        
            // Hanya bisa diupdate jika status draft, ditolak_admin, atau ditolak_kaprodi
            if ($pengajuan->status !== 'draft' && !in_array($pengajuan->status, ['ditolak_admin', 'ditolak_kaprodi'])) {
                return redirect()->route('mahasiswa.pengajuan.show', $pengajuan->id)
                                 ->with('error', 'Pengajuan ini tidak dapat diupdate karena sudah dalam proses verifikasi.');
            }
        
            $status = $request->input('action') === 'submit' ? 'diajukan_mahasiswa' : 'draft';
        
            $validationRules = [
                'action' => 'required|in:draft,submit',
                'dosen_pembimbing1_id' => $status === 'diajukan_mahasiswa' ? 'required|exists:dosens,id' : 'nullable|exists:dosens,id',
                'dosen_pembimbing2_id' => 'nullable|exists:dosens,id|different:dosen_pembimbing1_id',
            ];
        
            $dokumenSyaratList = $this->getDokumenSyarat($pengajuan->jenis_pengajuan);
        
            foreach ($dokumenSyaratList as $key => $namaDokumen) {
                $fieldName = 'dokumen_' . $key; // Perbaikan nama field, sesuaikan dengan blade jika perlu
                $uploadedDoc = $pengajuan->dokumens->where('nama_file', $namaDokumen)->first();
            
                $rulesForThisDoc = [
                    'nullable',
                    'file',
                    'mimes:pdf,jpg,jpeg,png', // Sesuaikan jika di blade hanya pdf
                    'max:2048',
                ];
            
                if ($status === 'diajukan_mahasiswa' && !$uploadedDoc) {
                    $rulesForThisDoc[] = 'required';
                }
            
                $validationRules[$fieldName] = $rulesForThisDoc;
            }
        
            $validator = Validator::make($request->all(), $validationRules);
        
            if ($validator->fails()) {
                return back()->withErrors($validator)->withInput();
            }
        
            $pengajuan->update([
                'status' => $status,
            ]);
        
            // Update entri sidang
            if ($pengajuan->sidang) {
                $pengajuan->sidang->update([
                    'dosen_pembimbing_id' => $request->dosen_pembimbing1_id,
                    'dosen_penguji1_id' => $request->dosen_pembimbing2_id,
                    // Perbarui status jika pengajuan difinalisasi dari draft
                    'status' => $status === 'diajukan_mahasiswa' ? 'belum_dijadwalkan' : $pengajuan->sidang->status,
                ]);
            } else {
                // Jika belum ada sidang (misalnya pengajuan draft baru), buat entri baru
                $pengajuan->sidang()->create([
                    'dosen_pembimbing_id' => $request->dosen_pembimbing1_id,
                    'dosen_penguji1_id' => $request->dosen_pembimbing2_id,
                    'status' => 'belum_dijadwalkan',
                ]);
            }
        
            // Proses dokumen
            foreach ($dokumenSyaratList as $key => $namaDokumen) {
                $fieldName = 'dokumen_' . $key; // Sesuaikan dengan name di Blade Anda
                if ($request->hasFile($fieldName)) {
                    $file = $request->file($fieldName);
                    $namaFileSyarat = $namaDokumen;
                
                    $existingDokumen = Dokumen::where('pengajuan_id', $pengajuan->id)
                                              ->where('nama_file', $namaFileSyarat)
                                              ->first();
                
                    $originalFileName = Str::slug($namaFileSyarat) . '_' . time() . '.' . $file->getClientOriginalExtension();
                    $path = $file->storeAs('dokumen_pengajuan/' . $pengajuan->id, $originalFileName, 'public');
                
                    if ($existingDokumen) {
                        Storage::disk('public')->delete($existingDokumen->path_file);
                        $existingDokumen->update(['path_file' => $path, 'status' => 'diajukan_mahasiswa']);
                    } else {
                        Dokumen::create([
                            'pengajuan_id' => $pengajuan->id,
                            'nama_file' => $namaFileSyarat,
                            'path_file' => $path,
                            'status' => 'diajukan_mahasiswa',
                        ]);
                    }
                }
            }
        
            if ($status === 'draft') {
                return redirect()->route('mahasiswa.pengajuan.show', $pengajuan->id)->with('success', 'Pengajuan draft berhasil diperbarui.');
            } else {
                return redirect()->route('mahasiswa.pengajuan.show', $pengajuan->id)->with('success', 'Pengajuan berhasil difinalisasi dan diajukan!');
            }
        }
    
        public function index()
        {
            if (!Auth::check() || Auth::user()->role !== 'mahasiswa') {
                return redirect()->route('mahasiswa.login')->with('error', 'Silakan login terlebih dahulu.');
            }
    
            $mahasiswa = $this->getLoggedInMahasiswa();
    
            $pengajuans = Pengajuan::where('mahasiswa_id', $mahasiswa->id)
                                    ->with('mahasiswa', 'sidang')
                                    ->orderBy('created_at', 'desc')
                                    ->get();
    
            return view('mahasiswa.pengajuan.index', compact('pengajuans'));
        }
    
        private function getDokumenSyarat($jenisPengajuan)
        {
            if ($jenisPengajuan == 'pkl') {
                return [
                    'laporan_pkl' => 'Laporan PKL sebanyak 2 rangkap',
                    'buku_pkl' => 'Buku PKL',
                    'kuisioner_survey_pkl' => 'Kuisioner survey PKL yang telah diisi dan ditandatangani serta distempel perusahaan',
                    'kuisioner_kelulusan' => 'Kuisioner Kelulusan (jika ada)',
                    'kuisioner_balikan_pkl' => 'Kuisioner balikan PKL',
                    'lembaran_rekomendasi_penguji' => 'Lembaran Rekomendasi Penguji',
                    'surat_permohonan_sidang_pkl' => 'Surat Permohonan Sidang PKL',
                    'lembar_penilaian_sidang_pkl' => 'Lembar Penilaian Sidang PKL (Penguji)',
                    'surat_keterangan_pelaksanaan_pkl' => 'Surat keterangan pelaksanaan PKL (Asli, distempel dan ditandatangani pihak perusahaan)',
                    'fotocopy_cover_laporan_pkl' => 'Fotocopy cover laporan PKL yang ada tanda tangan persetujuan sidang dari dosen pembimbing PKL',
                    'fotocopy_lembar_penilaian_industri' => 'Fotocopy lembar penilaian dari pembimbing di industri (ditandatangani pembimbing industri)',
                    'fotocopy_lembar_penilaian_dosen_pembimbing_pkl' => 'Fotocopy lembar penilaian dari dosen pembimbing PKL (ditandantangani pembimbing kampus)',
                    'fotocopy_lembar_konsultasi_bimbingan_pkl' => 'Fotocopy lembar konsultasi bimbingan PKL (diisi dan ditandatangani pembimbing kampus)',
                ];
            } elseif ($jenisPengajuan == 'ta') {
                return [
                    'surat_permohonan_sidang' => 'Surat Permohonan Sidang',
                    'surat_keterangan_bebas_kompensasi_ganjil_genap' => 'Surat Keterangan bebas Kompensasi Semester Ganjil & Genap',
                    'ipk_terakhir' => 'IPK Terakhir (Lampiran Rapor Semester 1 s.d 5 (D3) dan 1 s.d 7 (D4))',
                    'bukti_menyerahkan_laporan_pkl' => 'Bukti menyerahkan laporan PKL',
                    'nilai_toeic' => 'Nilai TOEIC minimal 450 (D3) dan 550 (D4) (Lampirkan kartu TOEIC)',
                    'tugas_akhir_rangkap_4' => 'Tugas Akhir Rangkap 4 yang disetujui pembimbing',
                    'kartu_bimbingan_konsultasi_ta_9x' => 'Kartu Bimbingan/Konsultasi Tugas Akhir 9x',
                    'fotocopy_ijazah_sma_ma_smk' => 'Fotokopi Ijazah SMA/MA/SMK',
                    // 'map_plastik_5_buah' => 'Map Plastik 5 buah, warna berdasarkan masing-masing Prodi', // Ini biasanya fisik
                    'fotocopy_sertifikat_diksarlin' => 'Fotokopi Sertifikat Diksarlin',
                    'sertifikat_responsi' => 'Sertifikat Responsi',
                    'nilai_satuan_kredit_ekstrakurikuler' => 'Nilai Satuan Kredit Ekstrakurikuler (SKE) (Lampirkan kartu SKE)',
                ];
            }
            return [];
        }
    
        public function destroy(Pengajuan $pengajuan)
        {
            if (!Auth::check() || Auth::user()->role !== 'mahasiswa') {
                return redirect()->route('mahasiswa.login')->with('error', 'Silakan login terlebih dahulu.');
            }
            $mahasiswa = $this->getLoggedInMahasiswa();
    
            if ($mahasiswa->id != $pengajuan->mahasiswa_id) {
                abort(403, 'Unauthorized access.');
            }
    
            if ($pengajuan->status === 'diverifikasi_admin' ||
                $pengajuan->status === 'dosen_ditunjuk' ||
                $pengajuan->status === 'ditolak_admin' ||
                $pengajuan->status === 'ditolak_kaprodi' ||
                $pengajuan->status === 'selesai'
            ) {
                return redirect()->route('mahasiswa.pengajuan.show', $pengajuan->id)
                                 ->with('error', 'Pengajuan ini tidak dapat dihapus karena sudah dalam proses verifikasi atau telah diproses.');
            }
    
            if ($pengajuan->sidang) {
                $pengajuan->sidang->delete();
            }
    
            foreach ($pengajuan->dokumens as $dokumen) {
                Storage::disk('public')->delete($dokumen->path_file);
                $dokumen->delete();
            }
    
            $pengajuan->delete();
    
            return redirect()->route('mahasiswa.pengajuan.index')
                             ->with('success', 'Pengajuan berhasil dihapus.');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Http/Controllers/SidangController.php
SidangController{
    //
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Http/Controllers/Kaprodi/PengajuanKaprodiController.php
PengajuanKaprodiController{
    public function index()
        {
            // Pengajuan yang menunggu Kaprodi jadwalkan (setelah diverifikasi admin)
            // atau yang sudah dijadwalkan tapi bisa diubah
            $pengajuansKaprodi = Pengajuan::whereIn('status', ['diverifikasi_admin', 'menunggu_penjadwalan_kaprodi', 'dosen_ditunjuk'])
                                        ->orderBy('created_at', 'desc')
                                        ->with('mahasiswa', 'sidang.ketuaSidang', 'sidang.sekretarisSidang', 'sidang.anggota1Sidang', 'sidang.anggota2Sidang', 'sidang.dosenPembimbing', 'sidang.dosenPenguji1', 'sidang.dosenPenguji2')
                                        ->get();
    
            // Pengajuan yang sudah final (tidak bisa diubah lagi oleh Kaprodi)
            $pengajuansSelesaiKaprodi = Pengajuan::whereIn('status', ['sidang_dijadwalkan_final', 'ditolak_kaprodi'])
                                                ->orderBy('created_at', 'desc')
                                                ->with('mahasiswa', 'sidang.ketuaSidang', 'sidang.sekretarisSidang', 'sidang.anggota1Sidang', 'sidang.anggota2Sidang', 'sidang.dosenPembimbing', 'sidang.dosenPenguji1', 'sidang.dosenPenguji2')
                                                ->get();
    
            return view('kaprodi.pengajuan.index', compact('pengajuansKaprodi', 'pengajuansSelesaiKaprodi'));
        }
    
        public function show(Pengajuan $pengajuan)
        {
            // Muat semua relasi dosen di sidang
            $pengajuan->load([
                'mahasiswa',
                'dokumens',
                'sidang.ketuaSidang',
                'sidang.sekretarisSidang',
                'sidang.anggota1Sidang',
                'sidang.anggota2Sidang',
            ]);
    
            $dosens = Dosen::orderBy('nama')->get();
    
            return view('kaprodi.pengajuan.show', compact('pengajuan', 'dosens'));
        }
    
        // Method ini hanya akan mengubah status pengajuan ke 'menunggu_penjadwalan_kaprodi'
        // setelah admin memverifikasi. Detail sidang akan diatur di method terpisah.
        public function setujui(Request $request, Pengajuan $pengajuan)
        {
            // Pastikan status pengajuan adalah 'diverifikasi_admin'
            if ($pengajuan->status !== 'diverifikasi_admin') {
                return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                                 ->with('error', 'Pengajuan tidak dapat disetujui pada status saat ini.');
            }
        
            // Update status pengajuan menjadi 'menunggu_penjadwalan_kaprodi'
            // Ini adalah status di mana Kaprodi dapat mulai menjadwalkan sidang.
            $pengajuan->update(['status' => 'menunggu_penjadwalan_kaprodi']);
            
            // Buat record Sidang kosong jika belum ada (akan diisi nanti di form jadwal)
            if (!$pengajuan->sidang) {
                $pengajuan->sidang()->create([]);
            }
    
            return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                             ->with('success', 'Pengajuan berhasil disetujui oleh Kaprodi. Silakan jadwalkan sidang.');
        }
    
        public function tolak(Request $request, Pengajuan $pengajuan)
        {
            // Pastikan pengajuan berstatus yang bisa ditolak oleh Kaprodi
            if (!in_array($pengajuan->status, ['diverifikasi_admin', 'menunggu_penjadwalan_kaprodi', 'dosen_ditunjuk'])) {
                return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                                 ->with('error', 'Pengajuan tidak dapat ditolak pada status saat ini.');
            }
    
            $request->validate([
                'alasan_penolakan_kaprodi' => 'required|string|max:500',
            ]);
    
            $pengajuan->update([
                'status' => 'ditolak_kaprodi',
                'alasan_penolakan_kaprodi' => $request->alasan_penolakan_kaprodi, // Gunakan kolom yang benar
            ]);
    
            // Hapus record sidang jika ada (opsional, tergantung kebijakan)
            if ($pengajuan->sidang) {
                $pengajuan->sidang->delete();
            }
    
            return redirect()->route('kaprodi.pengajuan.index')
                             ->with('success', 'Pengajuan berhasil ditolak oleh Kaprodi.');
        }
    
        // Menampilkan form untuk menjadwalkan/mengedit sidang
        public function jadwalSidangForm(Pengajuan $pengajuan)
        {
            // Pastikan pengajuan sudah melewati verifikasi admin dan menunggu penjadwalan Kaprodi
            if (!in_array($pengajuan->status, ['menunggu_penjadwalan_kaprodi', 'dosen_ditunjuk'])) {
                 return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                                 ->with('error', 'Pengajuan tidak dalam status yang tepat untuk penjadwalan sidang.');
            }
    
            $pengajuan->load('sidang'); // Muat data sidang jika sudah ada
            $dosens = Dosen::orderBy('nama')->get(); // Ambil semua dosen
            
            // Data default untuk form (jika belum ada sidang, inisialisasi objek Sidang baru)
            $sidang = $pengajuan->sidang ?? new Sidang();
    
            return view('kaprodi.pengajuan.jadwal_sidang_form', compact('pengajuan', 'dosens', 'sidang'));
        }
    
        public function storeUpdateJadwalSidang(Request $request, Pengajuan $pengajuan)
        {
            // Pastikan pengajuan sudah melewati verifikasi admin dan menunggu penjadwalan Kaprodi
            if (!in_array($pengajuan->status, ['menunggu_penjadwalan_kaprodi', 'dosen_ditunjuk'])) {
                return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                                ->with('error', 'Pengajuan tidak dalam status yang tepat untuk memperbarui jadwal sidang.');
            }
    
            // Validasi input
            $validator = Validator::make($request->all(), [
                'tanggal_sidang'           => 'required|date_format:Y-m-d|after_or_equal:today', // Validasi tanggal
                'waktu_sidang'             => 'required|date_format:H:i', // Validasi waktu
                'ruangan_sidang'           => 'required|string|max:255',
                'ketua_sidang_dosen_id'    => 'required|exists:dosens,id',
                'sekretaris_sidang_dosen_id' => 'required|exists:dosens,id|different:ketua_sidang_dosen_id',
                'anggota1_sidang_dosen_id' => 'required|exists:dosens,id|different:ketua_sidang_dosen_id|different:sekretaris_sidang_dosen_id',
                'anggota2_sidang_dosen_id' => 'nullable|exists:dosens,id|different:ketua_sidang_dosen_id|different:sekretaris_sidang_dosen_id|different:anggota1_sidang_dosen_id',
            ]);
    
            // Gabungkan tanggal dan waktu untuk membentuk tanggal_waktu_sidang
            $combinedDateTime = Carbon::parse($request->tanggal_sidang . ' ' . $request->waktu_sidang);
    
            // Tambahkan validasi kustom untuk memastikan tanggal dan waktu gabungan tidak di masa lalu
            if ($combinedDateTime->isPast()) {
                $validator->after(function ($validator) {
                    $validator->errors()->add('tanggal_waktu_sidang', 'Tanggal dan waktu sidang tidak boleh di masa lalu.');
                });
            }
    
            // Validasi unik untuk dosen di dalam sidang yang sama
            // Ambil semua ID dosen yang dikirim
            $dosenIdsInput = array_filter([
                $request->input('ketua_sidang_dosen_id'),
                $request->input('sekretaris_sidang_dosen_id'),
                $request->input('anggota1_sidang_dosen_id'),
                $request->input('anggota2_sidang_dosen_id'),
            ]);
            // Cek apakah ada duplikasi
            if (count($dosenIdsInput) !== count(array_unique($dosenIdsInput))) {
                $validator->after(function ($validator) {
                    $validator->errors()->add('dosen_bentrok', 'Ada dosen yang ditunjuk lebih dari satu kali dalam peran yang berbeda pada sidang yang sama.');
                });
            }
    
            if ($validator->fails()) {
                return back()->withErrors($validator)->withInput();
            }
    
            // Cek Bentrok Jadwal Sidang (di satu hari, hanya ada 1 persidangan di satu tempat)
            $existingSidangRuangan = Sidang::where('tanggal_waktu_sidang', $combinedDateTime)
                                        ->where('ruangan_sidang', $request->ruangan_sidang)
                                        ->where('pengajuan_id', '!=', $pengajuan->id) // Kecualikan sidang yang sedang di-edit
                                        ->first();
    
            if ($existingSidangRuangan) {
                return back()->withInput()->withErrors([
                    'jadwal_ruangan_bentrok' => 'Ruangan ' . $request->ruangan_sidang . ' sudah digunakan pada ' . $combinedDateTime->format('d F Y H:i') . ' untuk sidang lain.'
                ]);
            }
    
            // Cek Bentrok Jadwal Dosen (apakah dosen yang ditunjuk sudah punya jadwal di waktu yang sama)
            $bentrokDosen = Sidang::where('tanggal_waktu_sidang', $combinedDateTime)
                                ->where('pengajuan_id', '!=', $pengajuan->id) // Kecualikan sidang yang sedang di-edit
                                ->where(function ($query) use ($dosenIdsInput) {
                                    $query->whereIn('ketua_sidang_dosen_id', $dosenIdsInput)
                                          ->orWhereIn('sekretaris_sidang_dosen_id', $dosenIdsInput)
                                          ->orWhereIn('anggota1_sidang_dosen_id', $dosenIdsInput)
                                          ->orWhereIn('anggota2_sidang_dosen_id', $dosenIdsInput);
                                    // Tidak perlu mengecek dosen_pembimbing_id dan dosen_penguji karena sudah dihapus dari form
                                })
                                ->first();
    
            if ($bentrokDosen) {
                $bentrokNamaDosen = [];
                foreach ($dosenIdsInput as $dosenId) {
                    if (
                        $bentrokDosen->ketua_sidang_dosen_id == $dosenId ||
                        $bentrokDosen->sekretaris_sidang_dosen_id == $dosenId ||
                        $bentrokDosen->anggota1_sidang_dosen_id == $dosenId ||
                        $bentrokDosen->anggota2_sidang_dosen_id == $dosenId
                    ) {
                        $bentrokNamaDosen[] = Dosen::find($dosenId)->nama;
                    }
                }
                $bentrokNamaDosen = array_unique($bentrokNamaDosen);
    
                return back()->withInput()->withErrors([
                    'dosen_jadwal_bentrok' => 'Dosen berikut sudah memiliki jadwal sidang lain pada waktu tersebut: ' . implode(', ', $bentrokNamaDosen) . '.'
                ]);
            }
    
            // Cari atau buat record sidang. Karena Sidang memiliki relasi hasOne, kita bisa menggunakan updateOrCreate
            $sidang = Sidang::updateOrCreate(
                ['pengajuan_id' => $pengajuan->id],
                [
                    'tanggal_waktu_sidang'     => $combinedDateTime, // Gunakan Carbon object yang sudah digabung
                    'ruangan_sidang'           => $request->ruangan_sidang,
                    'ketua_sidang_dosen_id'    => $request->ketua_sidang_dosen_id,
                    'sekretaris_sidang_dosen_id' => $request->sekretaris_sidang_dosen_id,
                    'anggota1_sidang_dosen_id' => $request->anggota1_sidang_dosen_id,
                    'anggota2_sidang_dosen_id' => $request->anggota2_sidang_dosen_id,
                ]
            );
    
            // Update status pengajuan jika belum 'dosen_ditunjuk' (atau dari 'menunggu_penjadwalan_kaprodi')
            if ($pengajuan->status === 'menunggu_penjadwalan_kaprodi') {
                $pengajuan->update(['status' => 'dosen_ditunjuk']);
            }
    
            return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                             ->with('success', 'Jadwal sidang dan penunjukan dosen berhasil diperbarui.');
        }
    
        // Metode untuk menetapkan jadwal sidang sebagai final
        public function setJadwalFinal(Pengajuan $pengajuan)
        {
            // Pastikan pengajuan sudah berstatus 'dosen_ditunjuk' dan memiliki detail sidang lengkap
            // Hapus pemeriksaan dosen_pembimbing_id dan dosen_penguji1_id
            if ($pengajuan->status !== 'dosen_ditunjuk' || !$pengajuan->sidang || 
                !$pengajuan->sidang->tanggal_waktu_sidang || !$pengajuan->sidang->ruangan_sidang ||
                !$pengajuan->sidang->ketua_sidang_dosen_id || !$pengajuan->sidang->sekretaris_sidang_dosen_id ||
                !$pengajuan->sidang->anggota1_sidang_dosen_id
                // Anggota 2 adalah nullable, jadi tidak perlu divalidasi di sini
                ) {
                return back()->with('error', 'Sidang belum dijadwalkan lengkap atau tidak dalam status yang tepat untuk difinalkan.');
            }
    
            // Anda bisa menambahkan logika pengecekan persetujuan dosen di sini jika ada mekanisme persetujuan dosen secara aktif.
            // Untuk saat ini, kita langsung finalkan.
            $pengajuan->update(['status' => 'sidang_dijadwalkan_final']);
    
            return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                             ->with('success', 'Jadwal sidang berhasil difinalkan. Mahasiswa akan menerima notifikasi.');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"
PengajuanKaprodiController{
    // Method untuk menampilkan daftar pengajuan yang perlu ditinjau Kaprodi
        public function index()
        {
            // Ambil pengajuan yang statusnya 'diverifikasi_admin' (menunggu aksi Kaprodi)
            $pengajuansKaprodi = Pengajuan::where('status', 'diverifikasi_admin')
                                        ->orderBy('created_at', 'desc')
                                        ->get();
    
            // Ambil pengajuan yang sudah di-handle Kaprodi (misal: disetujui, ditolak, dosen ditunjuk)
            $pengajuansSelesaiKaprodi = Pengajuan::whereIn('status', ['dosen_ditunjuk', 'ditolak_kaprodi'])
                                                ->orderBy('created_at', 'desc')
                                                ->get();
    
            // Muat relasi mahasiswa agar data nama dan NIM tersedia di view
            $pengajuansKaprodi->load('mahasiswa');
            $pengajuansSelesaiKaprodi->load('mahasiswa');
    
            return view('kaprodi.pengajuan.index', compact('pengajuansKaprodi', 'pengajuansSelesaiKaprodi'));
        }
    
        // Method untuk menampilkan detail pengajuan Kaprodi
        public function show(Pengajuan $pengajuan)
        {
            // PENTING: Muat relasi yang relevan untuk Kaprodi
            // - mahasiswa: informasi mahasiswa
            // - dokumens: dokumen yang diupload
            // - sidang.ketuaSidang: ketua sidang yang ditunjuk admin (jika ada)
            // - sidang.pembimbing: dosen pembimbing (jika sudah ditunjuk)
            // - sidang.penguji1: dosen penguji 1 (jika sudah ditunjuk)
            // - sidang.penguji2: dosen penguji 2 (jika sudah ditunjuk)
            $pengajuan->load([
                'mahasiswa',
                'dokumens',
                // Ganti nama relasi di sini sesuai dengan yang ada di model Sidang Anda
                'sidang.ketuaSidang',
                'sidang.sekretarisSidang',
                'sidang.anggota1Sidang',
                'sidang.anggota2Sidang'
            ]);
    
            $dosens = Dosen::orderBy('nama')->get();
    
            return view('kaprodi.pengajuan.show', compact('pengajuan', 'dosens'));
        }
    
        // Method untuk menyetujui pengajuan oleh Kaprodi
        public function setujui(Request $request, Pengajuan $pengajuan)
        {
            // Pastikan status pengajuan
            if ($pengajuan->status !== 'diverifikasi_admin') {
                return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                                 ->with('error', 'Pengajuan tidak dapat disetujui pada status saat ini.');
            }
        
            // Validasi input dosen disesuaikan dengan nama kolom Anda
            $validator = Validator::make($request->all(), [
                'ketua_sidang_dosen_id' => 'required|exists:dosens,id', // Kaprodi yang menentukan ketua sidang?
                'sekretaris_sidang_dosen_id' => 'required|exists:dosens,id|different:ketua_sidang_dosen_id',
                'anggota1_sidang_dosen_id' => 'required|exists:dosens,id|different:ketua_sidang_dosen_id|different:sekretaris_sidang_dosen_id',
                'anggota2_sidang_dosen_id' => 'nullable|exists:dosens,id|different:ketua_sidang_dosen_id|different:sekretaris_sidang_dosen_id|different:anggota1_sidang_dosen_id',
            ]);
        
            if ($validator->fails()) {
                return back()->withErrors($validator)->withInput()->with('error_assign_dosen', true);
            }
        
            // Update status pengajuan
            $pengajuan->update(['status' => 'dosen_ditunjuk']);
        
            // Update data sidang dengan dosen-dosen yang ditunjuk
            if ($pengajuan->sidang) {
                $pengajuan->sidang->update([
                    'ketua_sidang_dosen_id' => $request->ketua_sidang_dosen_id,
                    'sekretaris_sidang_dosen_id' => $request->sekretaris_sidang_dosen_id,
                    'anggota1_sidang_dosen_id' => $request->anggota1_sidang_dosen_id,
                    'anggota2_sidang_dosen_id' => $request->anggota2_sidang_dosen_id,
                ]);
            } else {
                // Fallback, jika record sidang belum ada
                $pengajuan->sidang()->create([
                    'ketua_sidang_dosen_id' => $request->ketua_sidang_dosen_id,
                    'sekretaris_sidang_dosen_id' => $request->sekretaris_sidang_dosen_id,
                    'anggota1_sidang_dosen_id' => $request->anggota1_sidang_dosen_id,
                    'anggota2_sidang_dosen_id' => $request->anggota2_sidang_dosen_id,
                ]);
            }
        
            return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                             ->with('success', 'Pengajuan berhasil disetujui dan dosen berhasil ditunjuk.');
        }
    
        // Method untuk menolak pengajuan oleh Kaprodi
        public function tolak(Request $request, Pengajuan $pengajuan)
        {
            // Pastikan pengajuan berstatus 'diverifikasi_admin'
            if ($pengajuan->status !== 'diverifikasi_admin') {
                return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                                 ->with('error', 'Pengajuan tidak dapat ditolak pada status saat ini.');
            }
    
            // Validasi alasan penolakan
            $request->validate([
                'alasan_penolakan_kaprodi' => 'required|string|max:500',
            ]);
    
            // Ubah status pengajuan menjadi 'ditolak_kaprodi'
            $pengajuan->update([
                'status' => 'ditolak_kaprodi',
                'catatan_kaprodi' => $request->alasan_penolakan_kaprodi,
            ]);
    
            return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                             ->with('success', 'Pengajuan berhasil ditolak oleh Kaprodi.');
        }
    
        // Method terpisah untuk menunjuk dosen (jika Kaprodi ingin menunjuk dosen tanpa langsung menyetujui)
        // Atau ini bisa digabungkan ke method setujui seperti yang saya lakukan di atas.
        // Jika Anda ingin Kaprodi hanya bisa menunjuk dosen setelah menyetujui, maka method ini tidak perlu.
        // Saya telah menggabungkan penunjukan dosen ke dalam method setujui di atas.
        // Jika Anda ingin Kaprodi bisa menunjuk dosen kapan saja setelah diverifikasi_admin,
        // dan status pengajuan tidak berubah sampai Kaprodi benar-benar menyetujui,
        // maka method ini bisa digunakan terpisah, dan method 'setujui' hanya akan mengubah status tanpa input dosen.
        /*
        public function tunjukDosen(Request $request, Pengajuan $pengajuan)
        {
            // Pastikan pengajuan berstatus 'diverifikasi_admin'
            if ($pengajuan->status !== 'diverifikasi_admin') {
                return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                                 ->with('error', 'Dosen tidak dapat ditunjuk pada status saat ini.');
            }
    
            $validator = Validator::make($request->all(), [
                'dosen_pembimbing_id' => 'required|exists:dosens,id',
                'dosen_penguji1_id' => 'required|exists:dosens,id|different:dosen_pembimbing_id',
                'dosen_penguji2_id' => 'nullable|exists:dosens,id|different:dosen_pembimbing_id|different:dosen_penguji1_id',
            ]);
    
            if ($validator->fails()) {
                return back()->withErrors($validator)->withInput();
            }
    
            if ($pengajuan->sidang) {
                $pengajuan->sidang->update([
                    'dosen_pembimbing_id' => $request->dosen_pembimbing_id,
                    'dosen_penguji1_id' => $request->dosen_penguji1_id,
                    'dosen_penguji2_id' => $request->dosen_penguji2_id,
                ]);
            } else {
                $pengajuan->sidang()->create([
                    'dosen_pembimbing_id' => $request->dosen_pembimbing_id,
                    'dosen_penguji1_id' => $request->dosen_penguji1_id,
                    'dosen_penguji2_id' => $request->dosen_penguji2_id,
                ]);
            }
    
            // Status tidak berubah menjadi 'dosen_ditunjuk' di sini jika ini terpisah dari setujui
            return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                             ->with('success', 'Dosen pembimbing dan penguji berhasil ditunjuk.');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Http/Controllers/Admin/PengajuanAdminController.php
PengajuanAdminController{
    // Menampilkan daftar pengajuan yang perlu diverifikasi admin
        // Method untuk menampilkan daftar pengajuan mahasiswa yang login
        public function index()
        {
            // Ambil semua pengajuan yang relevan untuk admin
            // Anda bisa menggabungkan kriteria status atau mengurutkan sesuai kebutuhan
            $pengajuans = Pengajuan::whereIn('status', [
                                    'diajukan_mahasiswa', // Pastikan status ini sudah diubah sesuai pengajuan controller
                                    'diverifikasi_admin',
                                    'ditolak_admin',
                                    'dosen_ditunjuk',
                                    'ditolak_kaprodi',
                                    'dosen_menyetujui', // Jika Anda ingin admin melihat status ini
                                    'siap_sidang_kajur', // Jika Anda ingin admin melihat status ini
                                    'dijadwalkan', // Jika Anda ingin admin melihat status ini
                                    'selesai' // Jika Anda ingin admin melihat status ini
                                ])
                                ->with('mahasiswa') // Eager load relasi mahasiswa
                                ->orderBy('created_at', 'desc') // Urutkan berdasarkan tanggal terbaru
                                ->paginate(10); // Gunakan paginate untuk paginasi
    
            // Kirimkan hanya variabel $pengajuans ke view
            return view('admin.pengajuan.index', compact('pengajuans'));
        }
    
    // Menampilkan detail pengajuan untuk verifikasi
        public function show(Pengajuan $pengajuan)
        {
            // Pastikan hanya admin yang bisa melihat pengajuan yang relevan untuk dia
            // Jika statusnya sudah melewati admin (misal 'diverifikasi_admin' atau 'dosen_ditunjuk'), admin tetap bisa lihat tapi tidak bisa aksi
            if ($pengajuan->status !== 'diajukan_mahasiswa' && $pengajuan->status !== 'ditolak_admin') {
                // Admin masih bisa melihat, tapi mungkin perlu pesan/tampilan berbeda
                // Atau Anda bisa arahkan kembali jika pengajuan sudah diproses kaprodi
                // return redirect()->route('admin.pengajuan.index')->with('info', 'Pengajuan ini sudah diproses.');
            }
    
            // Muat relasi dokumen dan sidang agar bisa ditampilkan
            $pengajuan->load(['mahasiswa', 'dokumens', 'sidang.ketuaSidang']);
    
            // Kita bisa langsung menggunakan $pengajuan->dokumens di view,
            // tidak perlu membuat variabel $dokumens terpisah jika sudah di-load.
            // Jika Anda ingin tetap menggunakan $dokumens terpisah (sesuai view Anda),
            // maka definisikan:
            $dokumens = $pengajuan->dokumens;
    
            return view('admin.pengajuan.show', compact('pengajuan', 'dokumens')); // <-- Tambahkan 'dokumens' di sini
        }
    
        // Aksi: Memverifikasi dokumen pengajuan
        public function verify(Pengajuan $pengajuan)
        {
            // Pastikan hanya pengajuan berstatus 'diajukan' atau 'ditolak_admin' yang bisa diverifikasi
            if ($pengajuan->status !== 'diajukan_mahasiswa' && $pengajuan->status !== 'ditolak_admin') {
                return redirect()->route('admin.pengajuan.verifikasi.show', $pengajuan->id)
                                 ->with('error', 'Pengajuan tidak dapat diverifikasi pada status saat ini.');
            }
    
            // Ubah status pengajuan menjadi 'diverifikasi_admin'
            $pengajuan->update(['status' => 'diverifikasi_admin']);
    
            // Redirect kembali ke halaman daftar pengajuan verifikasi admin
            return redirect()->route('admin.pengajuan.verifikasi.index') // <--- PASTIkan ini
                             ->with('success', 'Pengajuan berhasil diverifikasi dan menunggu aksi Kaprodi.');
        }
    
        // Aksi: Menolak pengajuan
        public function reject(Request $request, Pengajuan $pengajuan)
        {
            // Izinkan penolakan jika status 'diajukan_mahasiswa' atau 'ditolak_admin'
            if ($pengajuan->status !== 'diajukan_mahasiswa' && $pengajuan->status !== 'ditolak_admin') {
                return redirect()->route('admin.pengajuan.verifikasi.show', $pengajuan->id)
                                 ->with('error', 'Pengajuan tidak dapat ditolak pada status saat ini.');
            }
        
            $request->validate([
                'alasan_penolakan_admin' => 'required|string|max:500', // Sesuaikan dengan nama input di form
            ]);
        
            $pengajuan->update([
                'status' => 'ditolak_admin',
                'alasan_penolakan_admin' => $request->alasan_penolakan_admin, // Gunakan nama kolom yang benar
            ]);
        
            return redirect()->route('admin.pengajuan.verifikasi.index')
                             ->with('success', 'Pengajuan berhasil ditolak.');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// --- Akhir Konten Direktori: app/Http/Controllers ---

// --- Konten dari Direktori: app/Models ---
// FILE: app/Models/Activity.php
Activity{
    use HasFactory;
    
        protected $fillable = [
            'user_id',
            'activity',
            'module',
            'ip_address',
            'user_agent',
        ];
    
        public function user(): BelongsTo
        {
            return $this->belongsTo(User::class);
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Models/Admin.php
Admin{
    //
        use HasFactory;
    
        protected $fillable = [
            'nama',
            'email',
        ];
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Models/Dokumen.php
Dokumen{
    use HasFactory;
    
        protected $fillable = [
            'pengajuan_id',
            'nama_file',
            'path_file',
        ];
    
        public function pengajuan()
        {
            return $this->belongsTo(Pengajuan::class);
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Models/Dosen.php
Dosen{
    use HasFactory, Notifiable; 
    
        protected $fillable = [
            'user_id',
            'nidn',
            'nama', // Ini adalah kolom 'nama' di DB yang akan diisi dari 'nama_lengkap' Excel
            'jurusan',
            'prodi',
            'jenis_kelamin',
            'email',
            'password', // Sertakan jika Anda mengisi kolom password di tabel dosens
        ];
    
        public function user()
        {
            return $this->belongsTo(User::class);
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Models/Kajur.php
Kajur{
    use HasFactory;
    
        protected $fillable = [
            'nama',
            'email',
        ];
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Models/Kaprodi.php
Kaprodi{
    use HasFactory;
    
        protected $fillable = [
            'nama',
            'email',
        ];
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Models/Mahasiswa.php
Mahasiswa{
    use HasFactory;
    
        protected $fillable = [
            'user_id',
            'nim',
            'nama_lengkap', // Sesuaikan jika nama kolom di DB berbeda
            'jurusan',
            'prodi',
            'jenis_kelamin',
            'kelas',
            'email',    // Tambahkan jika ada di DB
            //'password', // Tambahkan jika ada di DB
            'user_id',
        ];
    
        // Jika ada relasi ke User
        public function user()
        {
            return $this->belongsTo(User::class);
        }
    
        // Relasi ke Pengajuan (jika perlu)
        public function pengajuans()
        {
            return $this->hasMany(Pengajuan::class);
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Models/Pengajuan.php
Pengajuan{
    use HasFactory;
    
        protected $fillable = [
            'mahasiswa_id',
            'jenis_pengajuan',
            'judul_pengajuan', // Tambahkan jika ada kolom ini di tabel pengajuan
            'status',
            'alasan_penolakan_asdmin',
            'alasan_penolakan_kaprodi',
        ];
    
        // Relasi ke Mahasiswa
        public function mahasiswa()
        {
            return $this->belongsTo(Mahasiswa::class, 'mahasiswa_id', 'id');
        }
    
        // Relasi ke Dokumen
        public function dokumens()
        {
            return $this->hasMany(Dokumen::class);
        }
    
        // Relasi ke Sidang 
        public function sidang()
        {
            return $this->hasOne(Sidang::class);
        }
    
        // Hapus relasi-relasi ini dari Pengajuan karena foreign key ada di model Sidang
        /*
        public function pembimbing()
        {
            return $this->belongsTo(Dosen::class, 'dosen_pembimbing_id');
        }
        
        public function penguji1()
        {
            return $this->belongsTo(Dosen::class, 'dosen_penguji1_id');
        }
        
        public function penguji2()
        {
            return $this->belongsTo(Dosen::class, 'dosen_penguji2_id');
        }
        
        public function ketuaSidang()
        {
            return $this->belongsTo(Dosen::class, 'ketua_sidang_dosen_id');
        }
        */
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Models/Sidang.php
Sidang{
    use HasFactory;
    
        protected $fillable = [
            'pengajuan_id',
            'ketua_sidang_dosen_id',
            'sekretaris_sidang_dosen_id', 
            'anggota1_sidang_dosen_id',
            'anggota2_sidang_dosen_id',
            'tanggal_waktu_sidang', // Pastikan nama kolom ini sesuai di database
            'ruangan_sidang',       // Pastikan nama kolom ini sesuai di database
            'dosen_pembimbing_id',
            'dosen_penguji1_id', // Ini untuk pembimbing 2
            // --- KOLOM BARU DITAMBAHKAN ---
            'persetujuan_ketua_sidang',
            'persetujuan_sekretaris_sidang',
            'persetujuan_anggota1_sidang',
            'persetujuan_anggota2_sidang',
            'persetujuan_dosen_pembimbing',
            'persetujuan_dosen_penguji1',
            // --- AKHIR KOLOM BARU ---
            'status', // Pastikan kolom status sidang juga ada di fillable
        ];
    
        // Relasi ke Pengajuan
        public function pengajuan()
        {
            return $this->belongsTo(Pengajuan::class);
        }
    
        public function ketuaSidang()
        {
            return $this->belongsTo(Dosen::class, 'ketua_sidang_dosen_id');
        }
    
        public function sekretarisSidang()
        {
            return $this->belongsTo(Dosen::class, 'sekretaris_sidang_dosen_id');
        }
    
        public function anggota1Sidang()
        {
            return $this->belongsTo(Dosen::class, 'anggota1_sidang_dosen_id');
        }
    
        public function anggota2Sidang()
        {
            return $this->belongsTo(Dosen::class, 'anggota2_sidang_dosen_id');
        }
    
        // --- TAMBAHKAN RELASI INI ---
        public function dosenPembimbing()
        {
            return $this->belongsTo(Dosen::class, 'dosen_pembimbing_id');
        }
    
        public function dosenPenguji1()
        {
            return $this->belongsTo(Dosen::class, 'dosen_penguji1_id');
        }
    
        public function dosenPenguji2()
        {
            return $this->belongsTo(Dosen::class, 'dosen_penguji2_id');
        }
        // --- AKHIR TAMBAHAN RELASI ---
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: app/Models/User.php
User{
    /** @use HasFactory<\Database\Factories\UserFactory> */
        use HasFactory, Notifiable;
    
        /**
         * The attributes that are mass assignable.
         *
         * @var list<string>
         */
        protected $fillable = [
            'name',
            'email',
            'password',
            'role',
        ];
    
        /**
         * The attributes that should be hidden for serialization.
         *
         * @var list<string>
         */
        protected $hidden = [
            'password',
            'remember_token',
        ]; 
    
        /**
         * Get the attributes that should be cast.
         *
         * @return array<string, string>
         */
        protected function casts(): array
        {
            return [
                'email_verified_at' => 'datetime',
                'password' => 'hashed',
            ];
        }
    
        // Dapatkan mahasiswa yang terkait dengan User ini.
        public function mahasiswa()
        {
            // Asumsi: Di tabel 'mahasiswas', ada kolom 'user_id' yang merupakan foreign key ke 'id' user.
            return $this->hasOne(Mahasiswa::class, 'user_id');
        }
    
        /**
         * Dapatkan dosen yang terkait dengan User ini. (Jika ada relasi dosen)
         */
        public function dosen()
        {
            // Asumsi: Di tabel 'dosens', ada kolom 'user_id' yang merupakan foreign key ke 'id' user.
            return $this->hasOne(Dosen::class);
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// --- Akhir Konten Direktori: app/Models ---

// --- Konten dari Direktori: database/migrations ---
// FILE: database/migrations/0001_01_01_000000_create_users_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::create('users', function (Blueprint $table) {
                $table->id();
                $table->string('name');
                $table->string('email')->unique();
                $table->timestamp('email_verified_at')->nullable();
                $table->string('password');
                $table->rememberToken();
                $table->timestamps();
            });
    
            Schema::create('password_reset_tokens', function (Blueprint $table) {
                $table->string('email')->primary();
                $table->string('token');
                $table->timestamp('created_at')->nullable();
            });
    
            Schema::create('sessions', function (Blueprint $table) {
                $table->string('id')->primary();
                $table->foreignId('user_id')->nullable()->index();
                $table->string('ip_address', 45)->nullable();
                $table->text('user_agent')->nullable();
                $table->longText('payload');
                $table->integer('last_activity')->index();
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::dropIfExists('users');
            Schema::dropIfExists('password_reset_tokens');
            Schema::dropIfExists('sessions');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/0001_01_01_000001_create_cache_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::create('cache', function (Blueprint $table) {
                $table->string('key')->primary();
                $table->mediumText('value');
                $table->integer('expiration');
            });
    
            Schema::create('cache_locks', function (Blueprint $table) {
                $table->string('key')->primary();
                $table->string('owner');
                $table->integer('expiration');
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::dropIfExists('cache');
            Schema::dropIfExists('cache_locks');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/0001_01_01_000002_create_jobs_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::create('jobs', function (Blueprint $table) {
                $table->id();
                $table->string('queue')->index();
                $table->longText('payload');
                $table->unsignedTinyInteger('attempts');
                $table->unsignedInteger('reserved_at')->nullable();
                $table->unsignedInteger('available_at');
                $table->unsignedInteger('created_at');
            });
    
            Schema::create('job_batches', function (Blueprint $table) {
                $table->string('id')->primary();
                $table->string('name');
                $table->integer('total_jobs');
                $table->integer('pending_jobs');
                $table->integer('failed_jobs');
                $table->longText('failed_job_ids');
                $table->mediumText('options')->nullable();
                $table->integer('cancelled_at')->nullable();
                $table->integer('created_at');
                $table->integer('finished_at')->nullable();
            });
    
            Schema::create('failed_jobs', function (Blueprint $table) {
                $table->id();
                $table->string('uuid')->unique();
                $table->text('connection');
                $table->text('queue');
                $table->longText('payload');
                $table->longText('exception');
                $table->timestamp('failed_at')->useCurrent();
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::dropIfExists('jobs');
            Schema::dropIfExists('job_batches');
            Schema::dropIfExists('failed_jobs');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_19_170458_create_admins_table.php
extends{
    public function up(): void
        {
            Schema::create('admins', function (Blueprint $table) {
                $table->id();
                $table->string('nama');
                $table->string('email')->unique();
                $table->timestamps();
            });
        }
    
        public function down(): void
        {
            Schema::dropIfExists('admins');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_19_170459_create_dosens_table.php
extends{
    public function up(): void
        {
            Schema::create('dosens', function (Blueprint $table) {
                $table->id();
                // Kolom yang ada di `desc dosens;` Anda
                $table->foreignId('user_id')->nullable()->unique()->constrained('users')->onDelete('set null'); // Jika dosen punya user_id
                $table->string('nidn')->unique(); // Dari desc dosens
                $table->string('nama');
                $table->string('jurusan');      // Dari desc dosens
                $table->string('prodi');        // Dari desc dosens
                $table->string('jenis_kelamin'); // Dari desc dosens
    
                // Kolom yang kita tambahkan
                $table->string('email')->unique()->nullable();
                $table->string('password');
                $table->rememberToken();
    
                $table->timestamps();
            });
        }
    
        public function down(): void
        {
            Schema::dropIfExists('dosens');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_19_170459_create_mahasiswas_table.php
extends{
    public function up(): void
        {
            Schema::create('mahasiswas', function (Blueprint $table) {
                $table->id();
                $table->string('nim')->unique();
                $table->string('nama_lengkap');
                $table->string('jurusan');
                $table->string('prodi');
                $table->string('jenis_kelamin');
                $table->string('kelas');
                $table->timestamps();
            });
        }
    
        public function down(): void
        {
            Schema::dropIfExists('mahasiswas');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_19_170500_create_kajurs_table.php
extends{
    public function up(): void
        {
            Schema::create('kajurs', function (Blueprint $table) {
                $table->id();
                $table->string('nama');
                $table->string('email')->unique();
                $table->timestamps();
            });
        }
    
        public function down(): void
        {
            Schema::dropIfExists('kajurs');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_19_170500_create_kaprodis_table.php
extends{
    public function up(): void
        {
            Schema::create('kaprodis', function (Blueprint $table) {
                $table->id();
                $table->string('nama');
                $table->string('email')->unique();
                $table->timestamps();
            });
        }
    
        public function down(): void
        {
            Schema::dropIfExists('kaprodis');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_19_170501_create_pengajuans_table.php
extends{
    public function up(): void
        {
            Schema::create('pengajuans', function (Blueprint $table) {
                $table->id();
                $table->foreignId('mahasiswa_id')->constrained('users')->onDelete('cascade');
                $table->string('jenis_pengajuan'); // 'TA' atau 'PKL'
                $table->string('status'); // Misalnya, 'diajukan', 'disetujui', 'ditolak'
                $table->timestamps();
            });
        }
    
        public function down(): void
        {
            Schema::dropIfExists('pengajuans');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_19_170501_create_sidangs_table.php
extends{
    public function up(): void
        {
            Schema::create('sidangs', function (Blueprint $table) {
                $table->id();
                // Foreign key ke pengajuan yang terkait
                $table->foreignId('pengajuan_id')->constrained('pengajuans')->onDelete('cascade');
    
                // Dosen Peserta Sidang (foreign keys ke tabel dosens)
                $table->foreignId('ketua_sidang_dosen_id')->nullable()->constrained('dosens')->onDelete('set null');
                $table->foreignId('sekretaris_sidang_dosen_id')->nullable()->constrained('dosens')->onDelete('set null');
                $table->foreignId('anggota1_sidang_dosen_id')->nullable()->constrained('dosens')->onDelete('set null');
                $table->foreignId('anggota2_sidang_dosen_id')->nullable()->constrained('dosens')->onDelete('set null');
    
                // Tanggal dan Waktu Sidang (opsional, bisa ditambahkan nanti)
                $table->dateTime('tanggal_waktu_sidang')->nullable();
                $table->string('ruangan_sidang')->nullable();
    
                $table->timestamps();
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::dropIfExists('sidangs');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_19_170502_create_dokumens_table.php
extends{
    public function up(): void
        {
            Schema::create('dokumens', function (Blueprint $table) {
                $table->id();
                $table->foreignId('pengajuan_id')->constrained();
                $table->string('nama_file');
                $table->string('path_file');
                $table->timestamps();
            });
        }
    
        public function down(): void
        {
            Schema::dropIfExists('dokumens');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_19_183620_create_activities_table.php
CreateActivitiesTable{
    /**
         * Run the migrations.
         *
         * @return void
         */
        public function up()
        {
            Schema::create('activities', function (Blueprint $table) {
                $table->id();
                $table->unsignedBigInteger('user_id')->nullable(); // Siapa yang melakukan aktivitas (jika terkait user)
                $table->string('activity'); // Deskripsi aktivitas
                $table->string('module')->nullable(); // Modul yang terkait dengan aktivitas
                $table->string('ip_address')->nullable(); // Alamat IP user
                $table->text('user_agent')->nullable(); // Informasi browser user
                $table->timestamps();
    
                $table->foreign('user_id')->references('id')->on('users')->onDelete('set null');
            });
        }
    
        /**
         * Reverse the migrations.
         *
         * @return void
         */
        public function down()
        {
            Schema::dropIfExists('activities');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_19_195938_add_role_to_users_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::table('users', function (Blueprint $table) {
                $table->string('role')->default('mahasiswa'); // Tambahkan kolom 'role' dengan nilai default 'mahasiswa'
                // Anda bisa menambahkan indeks jika sering melakukan query berdasarkan role
                $table->index('role');
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::table('users', function (Blueprint $table) {
                $table->dropColumn('role'); // Hapus kolom 'role' jika migrasi di-rollback
            });
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_19_200352_add_user_id_to_mahasiswas_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::table('mahasiswas', function (Blueprint $table) {
                $table->unsignedBigInteger('user_id')->unique(); // Tambahkan kolom 'user_id' sebagai unsigned big integer dan unique
                $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade'); // Buat foreign key ke tabel 'users'
            });
        }
        
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::table('mahasiswas', function (Blueprint $table) {
                $table->dropForeign(['user_id']); // Hapus foreign key
                $table->dropColumn('user_id'); // Hapus kolom 'user_id'
            });
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_21_103532_add_catatan_admin_to_pengajuans_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::table('pengajuans', function (Blueprint $table) {
                $table->text('catatan_admin')->nullable()->after('status'); // Tambahkan kolom ini
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::table('pengajuans', function (Blueprint $table) {
                $table->dropColumn('catatan_admin'); // Hapus kolom jika rollback
            });
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_21_104156_add_catatan_kaprodi_to_pengajuans_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::table('pengajuans', function (Blueprint $table) {
                $table->text('catatan_kaprodi')->nullable()->after('catatan_admin'); // Tambahkan kolom ini
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::table('pengajuans', function (Blueprint $table) {
                $table->dropColumn('catatan_kaprodi'); // Hapus kolom jika rollback
            });
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_21_151930_add_dosen_to_sidangs_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up()
        {
            Schema::table('sidangs', function (Blueprint $table) {
                $table->foreignId('dosen_pembimbing_id')->nullable()->constrained('dosens')->onDelete('set null');
                $table->foreignId('dosen_penguji1_id')->nullable()->constrained('dosens')->onDelete('set null');
                $table->foreignId('dosen_penguji2_id')->nullable()->constrained('dosens')->onDelete('set null');
                // Jika ada ketua sidang di tabel sidang
                // $table->foreignId('ketua_sidang_dosen_id')->nullable()->constrained('dosens')->onDelete('set null');
            });
        }
        
        public function down()
        {
            Schema::table('sidangs', function (Blueprint $table) {
                $table->dropForeign(['dosen_pembimbing_id']);
                $table->dropForeign(['dosen_penguji1_id']);
                $table->dropForeign(['dosen_penguji2_id']);
                // $table->dropForeign(['ketua_sidang_dosen_id']);
            
                $table->dropColumn(['dosen_pembimbing_id', 'dosen_penguji1_id', 'dosen_penguji2_id']);
                // $table->dropColumn(['ketua_sidang_dosen_id']);
            });
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_22_075409_add_email_to_mahasiswas_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::table('mahasiswas', function (Blueprint $table) {
                // Tambahkan kolom 'email'
                // Penting: Pastikan kolom ini sesuai dengan kebutuhan Anda.
                // Jika email harus unik di tabel mahasiswas, gunakan ->unique().
                // Jika email boleh null, tambahkan ->nullable().
                // Saya sarankan unique dan tidak nullable jika email akan digunakan sebagai identitas.
                $table->string('email')->unique()->after('jenis_kelamin'); // Atau setelah kolom lain yang relevan
                // Jika Anda juga menyimpan password di tabel mahasiswas, dan itu diisi,
                // pastikan kolom password juga sudah ada atau tambahkan di sini jika belum.
                // $table->string('password')->after('email')->nullable(); // Jika perlu
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::table('mahasiswas', function (Blueprint $table) {
                // Ketika rollback, hapus kolom 'email'
                $table->dropColumn('email');
            });
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_05_29_080322_add_columns_to_pengajuans_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::table('pengajuans', function (Blueprint $table) {
                // Menambahkan kolom jenis_pengajuan jika belum ada
                if (!Schema::hasColumn('pengajuans', 'jenis_pengajuan')) {
                    $table->string('jenis_pengajuan')->after('mahasiswa_id'); // Sesuaikan posisi jika perlu
                }
                // Menambahkan kolom status jika belum ada
                if (!Schema::hasColumn('pengajuans', 'status')) {
                    $table->string('status')->default('draft')->after('jenis_pengajuan'); // Default status 'draft'
                }
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::table('pengajuans', function (Blueprint $table) {
                $table->dropColumn('jenis_pengajuan');
                $table->dropColumn('status');
            });
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_06_02_101730_add_dosen_approval_status_to_sidangs_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::table('sidangs', function (Blueprint $table) {
                // Kolom untuk melacak status persetujuan masing-masing dosen
                $table->enum('persetujuan_ketua_sidang', ['pending', 'setuju', 'tolak'])->default('pending')->after('ketua_sidang_dosen_id');
                $table->enum('persetujuan_sekretaris_sidang', ['pending', 'setuju', 'tolak'])->default('pending')->after('sekretaris_sidang_dosen_id');
                $table->enum('persetujuan_anggota1_sidang', ['pending', 'setuju', 'tolak'])->default('pending')->after('anggota1_sidang_dosen_id');
                $table->enum('persetujuan_anggota2_sidang', ['pending', 'setuju', 'tolak'])->default('pending')->after('anggota2_sidang_dosen_id');
                // Tambahkan juga untuk dosen pembimbing jika perlu konfirmasi mereka juga
                $table->enum('persetujuan_dosen_pembimbing', ['pending', 'setuju', 'tolak'])->default('pending')->after('dosen_pembimbing_id');
                $table->enum('persetujuan_dosen_penguji1', ['pending', 'setuju', 'tolak'])->default('pending')->after('dosen_penguji1_id'); // Ini adalah pembimbing 2
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::table('sidangs', function (Blueprint $table) {
                $table->dropColumn([
                    'persetujuan_ketua_sidang',
                    'persetujuan_sekretaris_sidang',
                    'persetujuan_anggota1_sidang',
                    'persetujuan_anggota2_sidang',
                    'persetujuan_dosen_pembimbing',
                    'persetujuan_dosen_penguji1',
                ]);
            });
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_06_02_110640_add_status_to_sidangs_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::table('sidangs', function (Blueprint $table) {
                // Tambahkan kolom 'status' setelah 'pengajuan_id' atau di akhir
                // Gunakan after() jika Anda ingin menempatkannya di posisi tertentu
                $table->enum('status', [
                    'belum_dijadwalkan',
                    'dosen_ditunjuk',
                    'dosen_menyetujui',
                    'dijadwalkan',
                    'ditolak_jadwal', // Jika ada dosen yang menolak jadwal atau kajur menolak
                    'selesai',
                    // Tambahkan status lain yang relevan di masa depan
                ])->default('belum_dijadwalkan')->after('pengajuan_id'); // Atau setelah kolom terakhir jika tidak spesifik
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::table('sidangs', function (Blueprint $table) {
                $table->dropColumn('status');
            });
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_06_02_161127_create_notifications_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::create('notifications', function (Blueprint $table) {
                $table->uuid('id')->primary();
                $table->string('type');
                $table->morphs('notifiable');
                $table->text('data');
                $table->timestamp('read_at')->nullable();
                $table->timestamps();
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::dropIfExists('notifications');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// FILE: database/migrations/2025_06_10_110613_create_personal_access_tokens_table.php
extends{
    /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::create('personal_access_tokens', function (Blueprint $table) {
                $table->id();
                $table->morphs('tokenable');
                $table->string('name');
                $table->string('token', 64)->unique();
                $table->text('abilities')->nullable();
                $table->timestamp('last_used_at')->nullable();
                $table->timestamp('expires_at')->nullable();
                $table->timestamps();
            });
        }
    
        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::dropIfExists('personal_access_tokens');
        }
}
saya akan memebrikan beberapa kode yang telah saya buat. jangan melakukan analisis atau memberikan kode yang sudah dimodifikasi untuk memenuhi alur diatas sebelum saya mengatakan kata "selesai sudah"

// --- Akhir Konten Direktori: database/migrations ---

// --- Konten dari Direktori: resources/views ---
// --- Akhir Konten Direktori: resources/views ---

// --- Konten dari Direktori: routes ---
// --- Akhir Konten Direktori: routes ---

