tambahin ruang dan waktu dan tanggal ke tampilan 

ini adalah routes yang berhubungan dengan mahasiswa:
// Mahasiswa Routes
Route::prefix('mahasiswa')->group(function () {
    // Public routes
    Route::get('/login', [MahasiswaController::class, 'loginForm'])->name('mahasiswa.login');
    Route::post('/login', [MahasiswaController::class, 'login']);
    Route::post('/logout', [MahasiswaController::class, 'logout'])->name('mahasiswa.logout');

    // Protected routes
    Route::middleware(['auth', 'mahasiswa'])->group(function () {
        Route::get('/dashboard', [MahasiswaController::class, 'dashboard'])->name('mahasiswa.dashboard');

        // Pengajuan routes
        Route::prefix('pengajuan')->name('mahasiswa.pengajuan.')->group(function () {
            Route::get('/pilih', [PengajuanController::class, 'pilihJenis'])->name('pilih');
            Route::get('/buat/{jenis}', [PengajuanController::class, 'create'])->name('create'); // Rute baru untuk membuat TA/PKL
            Route::post('/', [PengajuanController::class, 'store'])->name('store');
            Route::delete('/{pengajuan}', [PengajuanController::class, 'destroy'])->name('destroy');
            Route::get('/', [PengajuanController::class, 'index'])->name('index');
            Route::get('/{pengajuan}', [PengajuanController::class, 'show'])->name('show');
            Route::put('/{pengajuan}/draft', [PengajuanController::class, 'simpanSebagaiDraft'])->name('draft');
            Route::get('/{pengajuan}/edit', [PengajuanController::class, 'edit'])->name('edit');
            Route::put('/{pengajuan}', [PengajuanController::class, 'update'])->name('update');
        });

        // Dokumen routes (jika masih diperlukan, ini hanya untuk melihat daftar dokumen)
        Route::prefix('dokumen')->name('mahasiswa.dokumen.')->group(function () {
            Route::get('/pengajuan/{pengajuan}', [DokumenController::class, 'index'])->name('index');
            // Jika Anda memutuskan untuk memungkinkan penghapusan dokumen individual, tambahkan rute ini:
            Route::delete('/{dokumen}', [DokumenController::class, 'destroy'])->name('destroy');
        });
    });
});

ini adalah view mahasiswa/pengajuan/show.blade.php:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Detail Pengajuan Sidang {{ strtoupper($pengajuan->jenis_pengajuan) }}</title> {{-- Tambahkan jenis pengajuan di title --}}
</head>
<body>

    <h2>Detail Pengajuan Sidang {{ strtoupper($pengajuan->jenis_pengajuan) }}</h2> {{-- Tambahkan jenis pengajuan di H2 --}}

    {{-- Pesan sukses/error dari session --}}
    @if (session('success'))
        <div style="color: green; margin-bottom: 10px;">
            {{ session('success') }}
        </div>
    @endif

    @if (session('error'))
        <div style="color: red; margin-bottom: 10px;">
            {{ session('error') }}
        </div>
    @endif

    <p>Jenis Pengajuan: <strong>{{ strtoupper($pengajuan->jenis_pengajuan) }}</strong></p>
    <p>Status:
        {{-- Tampilan status yang lebih informatif dengan warna --}}
        @if ($pengajuan->status === 'draft')
            <strong style="color: orange;">DRAFT</strong>
        @elseif ($pengajuan->status === 'diajukan')
            <strong style="color: blue;">DIAJUKAN</strong>
        @elseif ($pengajuan->status === 'diproses')
            <strong style="color: green;">DIPROSES</strong>
        @elseif ($pengajuan->status === 'disetujui')
            <strong style="color: purple;">DISETUJUI</strong>
        @elseif ($pengajuan->status === 'ditolak')
            <strong style="color: red;">DITOLAK</strong>
        @elseif ($pengajuan->status === 'selesai')
            <strong style="color: green;">SELESAI</strong>
        @else
            <strong>{{ strtoupper($pengajuan->status) }}</strong> {{-- Default jika ada status lain --}}
        @endif
    </p>
    <p>Tanggal Dibuat: {{ $pengajuan->created_at->format('d M Y H:i') }}</p>
    <p>Terakhir Diperbarui: {{ $pengajuan->updated_at->format('d M Y H:i') }}</p>
    
    <h3>Dokumen Terupload:</h3>
    {{-- Ganti $dokumenTerupload dengan $pengajuan->dokumens --}}
    @if ($pengajuan->dokumens->count() > 0)
        <ul>
            @foreach ($pengajuan->dokumens as $dokumen) {{-- Ganti $dokumenTerupload dengan $pengajuan->dokumens --}}
                <li>
                    {{ $dokumen->nama_file }}:
                    <a href="{{ asset('storage/' . $dokumen->path_file) }}" target="_blank">Lihat File</a>
                    {{-- Status dokumen individual (jika diperlukan) --}}
                    {{-- (Status: {{ $dokumen->status }}) --}}
                </li>
            @endforeach
        </ul>
    @else
        <p>Belum ada dokumen yang diunggah untuk pengajuan ini.</p>
    @endif

    <h3>Informasi Anggota Sidang</h3>
    @if ($pengajuan->sidang)
        <p><strong>Ketua Sidang:</strong> {{ $pengajuan->sidang->ketuaSidang->nama ?? 'Belum Ditunjuk' }}</p>
        <p><strong>Sekretaris Sidang:</strong> {{ $pengajuan->sidang->sekretarisSidang->nama ?? 'Belum Ditunjuk' }}</p>
        <p><strong>Anggota Sidang 1:</strong> {{ $pengajuan->sidang->anggota1Sidang->nama ?? 'Belum Ditunjuk' }}</p>
        <p><strong>Anggota Sidang 2:</strong> {{ $pengajuan->sidang->anggota2Sidang->nama ?? 'Belum Ditunjuk' }}</p>
    @else
        <p>Anggota sidang belum ditunjuk.</p>
    @endif

    <hr> {{-- Garis pemisah untuk aksi --}}

    {{-- Tombol Aksi --}}
    <a href="{{ route('mahasiswa.pengajuan.index') }}">Kembali ke Daftar Pengajuan</a>

    @if ($pengajuan->status === 'draft')
        <a href="{{ route('mahasiswa.pengajuan.edit', $pengajuan->id) }}" style="margin-left: 10px;">Edit Pengajuan Draft</a>
    @endif

    {{-- Tombol Hapus hanya jika statusnya BUKAN 'disetujui', 'diproses', atau 'selesai' --}}
    @if ($pengajuan->status !== 'disetujui' && $pengajuan->status !== 'diproses' && $pengajuan->status !== 'selesai')
        <form action="{{ route('mahasiswa.pengajuan.destroy', $pengajuan->id) }}" method="POST" style="display:inline; margin-left: 10px;">
            @csrf
            @method('DELETE')
            <button type="submit" onclick="return confirm('Apakah Anda yakin ingin menghapus pengajuan ini dan semua dokumennya? Aksi ini tidak bisa dibatalkan.');" style="background-color: red; color: white; border: none; padding: 5px 10px; cursor: pointer; border-radius: 3px;">Hapus Pengajuan</button>
        </form>
    @endif

    <br><br>
    <a href="{{ route('mahasiswa.dashboard') }}">Kembali ke Dashboard Utama</a>

</body>
</html>

ini adlaah Controllers/Kaprodi/PengajuanKaprodiController.php:
<?php

namespace App\Http\Controllers\Kaprodi;

use App\Http\Controllers\Controller;
use App\Models\Pengajuan;
use App\Models\Dosen;
use App\Models\Sidang;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Carbon\Carbon;

class PengajuanKaprodiController extends Controller
{
    public function index()
    {
        // Pengajuan yang menunggu Kaprodi jadwalkan (setelah diverifikasi admin)
        // atau yang sudah dijadwalkan tapi bisa diubah
        $pengajuansKaprodi = Pengajuan::whereIn('status', ['diverifikasi_admin', 'menunggu_penjadwalan_kaprodi', 'dosen_ditunjuk'])
                                    ->orderBy('created_at', 'desc')
                                    ->with('mahasiswa', 'sidang.ketuaSidang', 'sidang.sekretarisSidang', 'sidang.anggota1Sidang', 'sidang.anggota2Sidang', 'sidang.dosenPembimbing', 'sidang.dosenPenguji1', 'sidang.dosenPenguji2')
                                    ->get();

        // Pengajuan yang sudah final (tidak bisa diubah lagi oleh Kaprodi)
        $pengajuansSelesaiKaprodi = Pengajuan::whereIn('status', ['sidang_dijadwalkan_final', 'ditolak_kaprodi'])
                                            ->orderBy('created_at', 'desc')
                                            ->with('mahasiswa', 'sidang.ketuaSidang', 'sidang.sekretarisSidang', 'sidang.anggota1Sidang', 'sidang.anggota2Sidang', 'sidang.dosenPembimbing', 'sidang.dosenPenguji1', 'sidang.dosenPenguji2')
                                            ->get();

        return view('kaprodi.pengajuan.index', compact('pengajuansKaprodi', 'pengajuansSelesaiKaprodi'));
    }

    public function show(Pengajuan $pengajuan)
    {
        // Muat semua relasi dosen di sidang
        $pengajuan->load([
            'mahasiswa',
            'dokumens',
            'sidang.ketuaSidang',
            'sidang.sekretarisSidang',
            'sidang.anggota1Sidang',
            'sidang.anggota2Sidang',
        ]);

        $dosens = Dosen::orderBy('nama')->get();

        return view('kaprodi.pengajuan.show', compact('pengajuan', 'dosens'));
    }

    // Method ini hanya akan mengubah status pengajuan ke 'menunggu_penjadwalan_kaprodi'
    // setelah admin memverifikasi. Detail sidang akan diatur di method terpisah.
    public function setujui(Request $request, Pengajuan $pengajuan)
    {
        // Pastikan status pengajuan adalah 'diverifikasi_admin'
        if ($pengajuan->status !== 'diverifikasi_admin') {
            return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                             ->with('error', 'Pengajuan tidak dapat disetujui pada status saat ini.');
        }
    
        // Update status pengajuan menjadi 'menunggu_penjadwalan_kaprodi'
        // Ini adalah status di mana Kaprodi dapat mulai menjadwalkan sidang.
        $pengajuan->update(['status' => 'menunggu_penjadwalan_kaprodi']);
        
        // Buat record Sidang kosong jika belum ada (akan diisi nanti di form jadwal)
        if (!$pengajuan->sidang) {
            $pengajuan->sidang()->create([]);
        }

        return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                         ->with('success', 'Pengajuan berhasil disetujui oleh Kaprodi. Silakan jadwalkan sidang.');
    }

    public function tolak(Request $request, Pengajuan $pengajuan)
    {
        // Pastikan pengajuan berstatus yang bisa ditolak oleh Kaprodi
        if (!in_array($pengajuan->status, ['diverifikasi_admin', 'menunggu_penjadwalan_kaprodi', 'dosen_ditunjuk'])) {
            return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                             ->with('error', 'Pengajuan tidak dapat ditolak pada status saat ini.');
        }

        $request->validate([
            'alasan_penolakan_kaprodi' => 'required|string|max:500',
        ]);

        $pengajuan->update([
            'status' => 'ditolak_kaprodi',
            'alasan_penolakan_kaprodi' => $request->alasan_penolakan_kaprodi, // Gunakan kolom yang benar
        ]);

        // Hapus record sidang jika ada (opsional, tergantung kebijakan)
        if ($pengajuan->sidang) {
            $pengajuan->sidang->delete();
        }

        return redirect()->route('kaprodi.pengajuan.index')
                         ->with('success', 'Pengajuan berhasil ditolak oleh Kaprodi.');
    }

    // Menampilkan form untuk menjadwalkan/mengedit sidang
    public function jadwalSidangForm(Pengajuan $pengajuan)
    {
        // Pastikan pengajuan sudah melewati verifikasi admin dan menunggu penjadwalan Kaprodi
        if (!in_array($pengajuan->status, ['menunggu_penjadwalan_kaprodi', 'dosen_ditunjuk'])) {
             return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                             ->with('error', 'Pengajuan tidak dalam status yang tepat untuk penjadwalan sidang.');
        }

        $pengajuan->load('sidang'); // Muat data sidang jika sudah ada
        $dosens = Dosen::orderBy('nama')->get(); // Ambil semua dosen
        
        // Data default untuk form (jika belum ada sidang, inisialisasi objek Sidang baru)
        $sidang = $pengajuan->sidang ?? new Sidang();

        return view('kaprodi.pengajuan.jadwal_sidang_form', compact('pengajuan', 'dosens', 'sidang'));
    }

    public function storeUpdateJadwalSidang(Request $request, Pengajuan $pengajuan)
    {
        // Pastikan pengajuan sudah melewati verifikasi admin dan menunggu penjadwalan Kaprodi
        if (!in_array($pengajuan->status, ['menunggu_penjadwalan_kaprodi', 'dosen_ditunjuk'])) {
            return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                            ->with('error', 'Pengajuan tidak dalam status yang tepat untuk memperbarui jadwal sidang.');
        }

        // Validasi input
        $validator = Validator::make($request->all(), [
            'tanggal_sidang'           => 'required|date_format:Y-m-d|after_or_equal:today', // Validasi tanggal
            'waktu_sidang'             => 'required|date_format:H:i', // Validasi waktu
            'ruangan_sidang'           => 'required|string|max:255',
            'ketua_sidang_dosen_id'    => 'required|exists:dosens,id',
            'sekretaris_sidang_dosen_id' => 'required|exists:dosens,id|different:ketua_sidang_dosen_id',
            'anggota1_sidang_dosen_id' => 'required|exists:dosens,id|different:ketua_sidang_dosen_id|different:sekretaris_sidang_dosen_id',
            'anggota2_sidang_dosen_id' => 'nullable|exists:dosens,id|different:ketua_sidang_dosen_id|different:sekretaris_sidang_dosen_id|different:anggota1_sidang_dosen_id',
        ]);

        // Gabungkan tanggal dan waktu untuk membentuk tanggal_waktu_sidang
        $combinedDateTime = Carbon::parse($request->tanggal_sidang . ' ' . $request->waktu_sidang);

        // Tambahkan validasi kustom untuk memastikan tanggal dan waktu gabungan tidak di masa lalu
        if ($combinedDateTime->isPast()) {
            $validator->after(function ($validator) {
                $validator->errors()->add('tanggal_waktu_sidang', 'Tanggal dan waktu sidang tidak boleh di masa lalu.');
            });
        }

        // Validasi unik untuk dosen di dalam sidang yang sama
        // Ambil semua ID dosen yang dikirim
        $dosenIdsInput = array_filter([
            $request->input('ketua_sidang_dosen_id'),
            $request->input('sekretaris_sidang_dosen_id'),
            $request->input('anggota1_sidang_dosen_id'),
            $request->input('anggota2_sidang_dosen_id'),
        ]);
        // Cek apakah ada duplikasi
        if (count($dosenIdsInput) !== count(array_unique($dosenIdsInput))) {
            $validator->after(function ($validator) {
                $validator->errors()->add('dosen_bentrok', 'Ada dosen yang ditunjuk lebih dari satu kali dalam peran yang berbeda pada sidang yang sama.');
            });
        }

        if ($validator->fails()) {
            return back()->withErrors($validator)->withInput();
        }

        // Cek Bentrok Jadwal Sidang (di satu hari, hanya ada 1 persidangan di satu tempat)
        $existingSidangRuangan = Sidang::where('tanggal_waktu_sidang', $combinedDateTime)
                                    ->where('ruangan_sidang', $request->ruangan_sidang)
                                    ->where('pengajuan_id', '!=', $pengajuan->id) // Kecualikan sidang yang sedang di-edit
                                    ->first();

        if ($existingSidangRuangan) {
            return back()->withInput()->withErrors([
                'jadwal_ruangan_bentrok' => 'Ruangan ' . $request->ruangan_sidang . ' sudah digunakan pada ' . $combinedDateTime->format('d F Y H:i') . ' untuk sidang lain.'
            ]);
        }

        // Cek Bentrok Jadwal Dosen (apakah dosen yang ditunjuk sudah punya jadwal di waktu yang sama)
        $bentrokDosen = Sidang::where('tanggal_waktu_sidang', $combinedDateTime)
                            ->where('pengajuan_id', '!=', $pengajuan->id) // Kecualikan sidang yang sedang di-edit
                            ->where(function ($query) use ($dosenIdsInput) {
                                $query->whereIn('ketua_sidang_dosen_id', $dosenIdsInput)
                                      ->orWhereIn('sekretaris_sidang_dosen_id', $dosenIdsInput)
                                      ->orWhereIn('anggota1_sidang_dosen_id', $dosenIdsInput)
                                      ->orWhereIn('anggota2_sidang_dosen_id', $dosenIdsInput);
                                // Tidak perlu mengecek dosen_pembimbing_id dan dosen_penguji karena sudah dihapus dari form
                            })
                            ->first();

        if ($bentrokDosen) {
            $bentrokNamaDosen = [];
            foreach ($dosenIdsInput as $dosenId) {
                if (
                    $bentrokDosen->ketua_sidang_dosen_id == $dosenId ||
                    $bentrokDosen->sekretaris_sidang_dosen_id == $dosenId ||
                    $bentrokDosen->anggota1_sidang_dosen_id == $dosenId ||
                    $bentrokDosen->anggota2_sidang_dosen_id == $dosenId
                ) {
                    $bentrokNamaDosen[] = Dosen::find($dosenId)->nama;
                }
            }
            $bentrokNamaDosen = array_unique($bentrokNamaDosen);

            return back()->withInput()->withErrors([
                'dosen_jadwal_bentrok' => 'Dosen berikut sudah memiliki jadwal sidang lain pada waktu tersebut: ' . implode(', ', $bentrokNamaDosen) . '.'
            ]);
        }

        // Cari atau buat record sidang. Karena Sidang memiliki relasi hasOne, kita bisa menggunakan updateOrCreate
        $sidang = Sidang::updateOrCreate(
            ['pengajuan_id' => $pengajuan->id],
            [
                'tanggal_waktu_sidang'     => $combinedDateTime, // Gunakan Carbon object yang sudah digabung
                'ruangan_sidang'           => $request->ruangan_sidang,
                'ketua_sidang_dosen_id'    => $request->ketua_sidang_dosen_id,
                'sekretaris_sidang_dosen_id' => $request->sekretaris_sidang_dosen_id,
                'anggota1_sidang_dosen_id' => $request->anggota1_sidang_dosen_id,
                'anggota2_sidang_dosen_id' => $request->anggota2_sidang_dosen_id,
            ]
        );

        // Update status pengajuan jika belum 'dosen_ditunjuk' (atau dari 'menunggu_penjadwalan_kaprodi')
        if ($pengajuan->status === 'menunggu_penjadwalan_kaprodi') {
            $pengajuan->update(['status' => 'dosen_ditunjuk']);
        }

        return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                         ->with('success', 'Jadwal sidang dan penunjukan dosen berhasil diperbarui.');
    }

    // Metode untuk menetapkan jadwal sidang sebagai final
    public function setJadwalFinal(Pengajuan $pengajuan)
    {
        // Pastikan pengajuan sudah berstatus 'dosen_ditunjuk' dan memiliki detail sidang lengkap
        // Hapus pemeriksaan dosen_pembimbing_id dan dosen_penguji1_id
        if ($pengajuan->status !== 'dosen_ditunjuk' || !$pengajuan->sidang || 
            !$pengajuan->sidang->tanggal_waktu_sidang || !$pengajuan->sidang->ruangan_sidang ||
            !$pengajuan->sidang->ketua_sidang_dosen_id || !$pengajuan->sidang->sekretaris_sidang_dosen_id ||
            !$pengajuan->sidang->anggota1_sidang_dosen_id
            // Anggota 2 adalah nullable, jadi tidak perlu divalidasi di sini
            ) {
            return back()->with('error', 'Sidang belum dijadwalkan lengkap atau tidak dalam status yang tepat untuk difinalkan.');
        }

        // Anda bisa menambahkan logika pengecekan persetujuan dosen di sini jika ada mekanisme persetujuan dosen secara aktif.
        // Untuk saat ini, kita langsung finalkan.
        $pengajuan->update(['status' => 'sidang_dijadwalkan_final']);

        return redirect()->route('kaprodi.pengajuan.show', $pengajuan->id)
                         ->with('success', 'Jadwal sidang berhasil difinalkan. Mahasiswa akan menerima notifikasi.');
    }
}


saya ingin di halaman itu ditampilkan juga tanggal, waktu, dan ruangan yang telah ditetapkan oleh kaprodi 